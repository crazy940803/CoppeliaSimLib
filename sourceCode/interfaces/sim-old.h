// single precision, non-deprecated:
SIM_DLLEXPORT simInt simSetFloatParam(simInt parameter,simFloat floatState);
SIM_DLLEXPORT simInt simGetFloatParam(simInt parameter,simFloat* floatState);
SIM_DLLEXPORT simInt simGetObjectMatrix(simInt objectHandle,simInt relativeToObjectHandle,simFloat* matrix);
SIM_DLLEXPORT simInt simSetObjectMatrix(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* matrix);
SIM_DLLEXPORT simInt simGetObjectPose(simInt objectHandle,simInt relativeToObjectHandle,simFloat* pose);
SIM_DLLEXPORT simInt simSetObjectPose(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* pose);
SIM_DLLEXPORT simInt simGetObjectPosition(simInt objectHandle,simInt relativeToObjectHandle,simFloat* position);
SIM_DLLEXPORT simInt simSetObjectPosition(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* position);
SIM_DLLEXPORT simInt simGetObjectOrientation(simInt objectHandle,simInt relativeToObjectHandle,simFloat* eulerAngles);
SIM_DLLEXPORT simInt simGetObjectQuaternion(simInt objectHandle,simInt relativeToObjectHandle,simFloat* quaternion);
SIM_DLLEXPORT simInt simSetObjectQuaternion(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* quaternion);
SIM_DLLEXPORT simInt simSetObjectOrientation(simInt objectHandle,simInt relativeToObjectHandle,const simFloat* eulerAngles);
SIM_DLLEXPORT simInt simGetJointPosition(simInt objectHandle,simFloat* position);
SIM_DLLEXPORT simInt simSetJointPosition(simInt objectHandle,simFloat position);
SIM_DLLEXPORT simInt simSetJointTargetPosition(simInt objectHandle,simFloat targetPosition);
SIM_DLLEXPORT simInt simGetJointTargetPosition(simInt objectHandle,simFloat* targetPosition);
SIM_DLLEXPORT simInt simGetObjectChildPose(simInt objectHandle,simFloat* pose);
SIM_DLLEXPORT simInt simSetObjectChildPose(simInt objectHandle,const simFloat* pose);
SIM_DLLEXPORT simInt simGetJointInterval(simInt objectHandle,simBool* cyclic,simFloat* interval);
SIM_DLLEXPORT simInt simSetJointInterval(simInt objectHandle,simBool cyclic,const simFloat* interval);
SIM_DLLEXPORT simInt simBuildIdentityMatrix(simFloat* matrix);
SIM_DLLEXPORT simInt simBuildMatrix(const simFloat* position,const simFloat* eulerAngles,simFloat* matrix);
SIM_DLLEXPORT simInt simBuildPose(const simFloat* position,const simFloat* eulerAngles,simFloat* pose);
SIM_DLLEXPORT simInt simGetEulerAnglesFromMatrix(const simFloat* matrix,simFloat* eulerAngles);
SIM_DLLEXPORT simInt simInvertMatrix(simFloat* matrix);
SIM_DLLEXPORT simInt simMultiplyMatrices(const simFloat* matrixIn1,const simFloat* matrixIn2,simFloat* matrixOut);
SIM_DLLEXPORT simInt simMultiplyPoses(const simFloat* poseIn1,const simFloat* poseIn2,simFloat* poseOut);
SIM_DLLEXPORT simInt simInvertPose(simFloat* pose);
SIM_DLLEXPORT simInt simInterpolatePoses(const simFloat* poseIn1,const simFloat* poseIn2,simFloat interpolFactor,simFloat* poseOut);
SIM_DLLEXPORT simInt simPoseToMatrix(const simFloat* poseIn,simFloat* matrixOut);
SIM_DLLEXPORT simInt simMatrixToPose(const simFloat* matrixIn,simFloat* poseOut);
SIM_DLLEXPORT simInt simInterpolateMatrices(const simFloat* matrixIn1,const simFloat* matrixIn2,simFloat interpolFactor,simFloat* matrixOut);
SIM_DLLEXPORT simInt simTransformVector(const simFloat* matrix,simFloat* vect);
SIM_DLLEXPORT simFloat simGetSimulationTime();
SIM_DLLEXPORT simFloat simGetSystemTime();
SIM_DLLEXPORT simInt simHandleProximitySensor(simInt sensorHandle,simFloat* detectedPoint,simInt* detectedObjectHandle,simFloat* normalVector);
SIM_DLLEXPORT simInt simReadProximitySensor(simInt sensorHandle,simFloat* detectedPoint,simInt* detectedObjectHandle,simFloat* normalVector);
SIM_DLLEXPORT simInt simHandleDynamics(simFloat deltaTime);
SIM_DLLEXPORT simInt simCheckProximitySensor(simInt sensorHandle,simInt entityHandle,simFloat* detectedPoint);
SIM_DLLEXPORT simInt simCheckProximitySensorEx(simInt sensorHandle,simInt entityHandle,simInt detectionMode,simFloat detectionThreshold,simFloat maxAngle,simFloat* detectedPoint,simInt* detectedObjectHandle,simFloat* normalVector);
SIM_DLLEXPORT simInt simCheckProximitySensorEx2(simInt sensorHandle,simFloat* vertexPointer,simInt itemType,simInt itemCount,simInt detectionMode,simFloat detectionThreshold,simFloat maxAngle,simFloat* detectedPoint,simFloat* normalVector);
SIM_DLLEXPORT simInt simCheckCollisionEx(simInt entity1Handle,simInt entity2Handle,simFloat** intersectionSegments);
SIM_DLLEXPORT simInt simCheckDistance(simInt entity1Handle,simInt entity2Handle,simFloat threshold,simFloat* distanceData);
SIM_DLLEXPORT simInt simSetSimulationTimeStep(simFloat timeStep);
SIM_DLLEXPORT simFloat simGetSimulationTimeStep();
SIM_DLLEXPORT simInt simAdjustRealTimeTimer(simInt instanceIndex,simFloat deltaTime);
SIM_DLLEXPORT simInt simFloatingViewAdd(simFloat posX,simFloat posY,simFloat sizeX,simFloat sizeY,simInt options);
SIM_DLLEXPORT simInt simHandleGraph(simInt graphHandle,simFloat simulationTime);
SIM_DLLEXPORT simInt simSetGraphStreamTransformation(simInt graphHandle,simInt streamId,simInt trType,simFloat mult,simFloat off,simInt movingAvgPeriod);
SIM_DLLEXPORT simInt simAddGraphStream(simInt graphHandle,const simChar* streamName,const simChar* unitStr,simInt options,const simFloat* color,simFloat cyclicRange);
SIM_DLLEXPORT simInt simAddGraphCurve(simInt graphHandle,const simChar* curveName,simInt dim,const simInt* streamIds,const simFloat* defaultValues,const simChar* unitStr,simInt options,const simFloat* color,simInt curveWidth);
SIM_DLLEXPORT simInt simSetGraphStreamValue(simInt graphHandle,simInt streamId,simFloat value);
SIM_DLLEXPORT simInt simSetJointTargetVelocity(simInt objectHandle,simFloat targetVelocity);
SIM_DLLEXPORT simInt simGetJointTargetVelocity(simInt objectHandle,simFloat* targetVelocity);
SIM_DLLEXPORT simInt simScaleObjects(const simInt* objectHandles,simInt objectCount,simFloat scalingFactor,simBool scalePositionsToo);
SIM_DLLEXPORT simInt simAddDrawingObject(simInt objectType,simFloat size,simFloat duplicateTolerance,simInt parentObjectHandle,simInt maxItemCount,const simFloat* color,const simFloat* setToNULL,const simFloat* setToNULL2,const simFloat* setToNULL3);
SIM_DLLEXPORT simInt simAddDrawingObjectItem(simInt objectHandle,const simFloat* itemData);
SIM_DLLEXPORT simFloat simGetObjectSizeFactor(simInt objectHandle);
SIM_DLLEXPORT simInt simSetFloatSignal(const simChar* signalName,simFloat signalValue);
SIM_DLLEXPORT simInt simGetFloatSignal(const simChar* signalName,simFloat* signalValue);
SIM_DLLEXPORT simInt simReadForceSensor(simInt objectHandle,simFloat* forceVector,simFloat* torqueVector);
SIM_DLLEXPORT simInt simSetLightParameters(simInt objectHandle,simInt state,const simFloat* setToNULL,const simFloat* diffusePart,const simFloat* specularPart);
SIM_DLLEXPORT simInt simGetLightParameters(simInt objectHandle,simFloat* setToNULL,simFloat* diffusePart,simFloat* specularPart);
SIM_DLLEXPORT simInt simGetVelocity(simInt shapeHandle,simFloat* linearVelocity,simFloat* angularVelocity);
SIM_DLLEXPORT simInt simGetObjectVelocity(simInt objectHandle,simFloat* linearVelocity,simFloat* angularVelocity);
SIM_DLLEXPORT simInt simGetJointVelocity(simInt jointHandle,simFloat* velocity);
SIM_DLLEXPORT simInt simAddForceAndTorque(simInt shapeHandle,const simFloat* force,const simFloat* torque);
SIM_DLLEXPORT simInt simAddForce(simInt shapeHandle,const simFloat* position,const simFloat* force);
SIM_DLLEXPORT simInt simSetObjectColor(simInt objectHandle,simInt index,simInt colorComponent,const simFloat* rgbData);
SIM_DLLEXPORT simInt simGetObjectColor(simInt objectHandle,simInt index,simInt colorComponent,simFloat* rgbData);
SIM_DLLEXPORT simInt simSetShapeColor(simInt shapeHandle,const simChar* colorName,simInt colorComponent,const simFloat* rgbData);
SIM_DLLEXPORT simInt simGetShapeColor(simInt shapeHandle,const simChar* colorName,simInt colorComponent,simFloat* rgbData);
SIM_DLLEXPORT simInt simGetContactInfo(simInt dynamicPass,simInt objectHandle,simInt index,simInt* objectHandles,simFloat* contactInfo);
SIM_DLLEXPORT simInt simImportShape(simInt fileformat,const simChar* pathAndFilename,simInt options,simFloat identicalVerticeTolerance,simFloat scalingFactor);
SIM_DLLEXPORT simInt simImportMesh(simInt fileformat,const simChar* pathAndFilename,simInt options,simFloat identicalVerticeTolerance,simFloat scalingFactor,simFloat*** vertices,simInt** verticesSizes,simInt*** indices,simInt** indicesSizes,simFloat*** reserved,simChar*** names);
SIM_DLLEXPORT simInt simExportMesh(simInt fileformat,const simChar* pathAndFilename,simInt options,simFloat scalingFactor,simInt elementCount,const simFloat** vertices,const simInt* verticesSizes,const simInt** indices,const simInt* indicesSizes,simFloat** reserved,const simChar** names);
SIM_DLLEXPORT simInt simCreateMeshShape(simInt options,simFloat shadingAngle,const simFloat* vertices,simInt verticesSize,const simInt* indices,simInt indicesSize,simFloat* reserved);
SIM_DLLEXPORT simInt simCreatePrimitiveShape(simInt primitiveType,const simFloat* sizes,simInt options);
SIM_DLLEXPORT simInt simCreateHeightfieldShape(simInt options,simFloat shadingAngle,simInt xPointCount,simInt yPointCount,simFloat xSize,const simFloat* heights);
SIM_DLLEXPORT simInt simGetShapeMesh(simInt shapeHandle,simFloat** vertices,simInt* verticesSize,simInt** indices,simInt* indicesSize,simFloat** normals);
SIM_DLLEXPORT simInt simCreateJoint(simInt jointType,simInt jointMode,simInt options,const simFloat* sizes,const simFloat* reservedA,const simFloat* reservedB);
SIM_DLLEXPORT simInt simGetObjectFloatParam(simInt objectHandle,simInt ParamID,simFloat* Param);
SIM_DLLEXPORT simInt simSetObjectFloatParam(simInt objectHandle,simInt ParamID,simFloat Param);
SIM_DLLEXPORT simFloat* simGetObjectFloatArrayParam(simInt objectHandle,simInt parameterID,simInt* size);
SIM_DLLEXPORT simInt simSetObjectFloatArrayParam(simInt objectHandle,simInt parameterID,const simFloat* params,simInt size);
SIM_DLLEXPORT simInt simAuxiliaryConsoleOpen(const simChar* title,simInt maxLines,simInt mode,const simInt* position,const simInt* size,const simFloat* textColor,const simFloat* backgroundColor);
SIM_DLLEXPORT simInt simGetRotationAxis(const simFloat* matrixStart,const simFloat* matrixGoal,simFloat* axis,simFloat* angle);
SIM_DLLEXPORT simInt simRotateAroundAxis(const simFloat* matrixIn,const simFloat* axis,const simFloat* axisPos,simFloat angle,simFloat* matrixOut);
SIM_DLLEXPORT simInt simGetJointForce(simInt jointHandle,simFloat* forceOrTorque);
SIM_DLLEXPORT simInt simGetJointTargetForce(simInt jointHandle,simFloat* forceOrTorque);
SIM_DLLEXPORT simInt simSetJointTargetForce(simInt objectHandle,simFloat forceOrTorque,simBool signedValue);
SIM_DLLEXPORT simInt simCameraFitToView(simInt viewHandleOrIndex,simInt objectCount,const simInt* objectHandles,simInt options,simFloat scaling);
SIM_DLLEXPORT simInt simHandleVisionSensor(simInt visionSensorHandle,simFloat** auxValues,simInt** auxValuesCount);
SIM_DLLEXPORT simInt simReadVisionSensor(simInt visionSensorHandle,simFloat** auxValues,simInt** auxValuesCount);
SIM_DLLEXPORT simInt simCheckVisionSensor(simInt visionSensorHandle,simInt entityHandle,simFloat** auxValues,simInt** auxValuesCount);
SIM_DLLEXPORT simFloat* simCheckVisionSensorEx(simInt visionSensorHandle,simInt entityHandle,simBool returnImage);
SIM_DLLEXPORT simUChar* simGetVisionSensorImg(simInt sensorHandle,simInt options,simFloat rgbaCutOff,const simInt* pos,const simInt* size,simInt* resolution);
SIM_DLLEXPORT simFloat* simGetVisionSensorDepth(simInt sensorHandle,simInt options,const simInt* pos,const simInt* size,simInt* resolution);
SIM_DLLEXPORT simInt simCreateDummy(simFloat size,const simFloat* reserved);
SIM_DLLEXPORT simInt simCreateProximitySensor(simInt sensorType,simInt subType,simInt options,const simInt* intParams,const simFloat* floatParams,const simFloat* reserved);
SIM_DLLEXPORT simInt simCreateForceSensor(simInt options,const simInt* intParams,const simFloat* floatParams,const simFloat* reserved);
SIM_DLLEXPORT simInt simCreateVisionSensor(simInt options,const simInt* intParams,const simFloat* floatParams,const simFloat* reserved);
SIM_DLLEXPORT simInt simConvexDecompose(simInt shapeHandle,simInt options,const simInt* intParams,const simFloat* floatParams);
SIM_DLLEXPORT simInt simWriteTexture(simInt textureId,simInt options,const simChar* data,simInt posX,simInt posY,simInt sizeX,simInt sizeY,simFloat interpol);
SIM_DLLEXPORT simInt simCreateTexture(const simChar* fileName,simInt options,const simFloat* planeSizes,const simFloat* scalingUV,const simFloat* xy_g,simInt fixedResolution,simInt* textureId,simInt* resolution,const simVoid* reserved);
SIM_DLLEXPORT simInt simGetShapeGeomInfo(simInt shapeHandle,simInt* intData,simFloat* floatData,simVoid* reserved);
SIM_DLLEXPORT simInt simScaleObject(simInt objectHandle,simFloat xScale,simFloat yScale,simFloat zScale,simInt options);
SIM_DLLEXPORT simInt simSetShapeTexture(simInt shapeHandle,simInt textureId,simInt mappingMode,simInt options,const simFloat* uvScaling,const simFloat* position,const simFloat* orientation);
SIM_DLLEXPORT simInt simTransformImage(simUChar* image,const simInt* resolution,simInt options,const simFloat* floatParams,const simInt* intParams,simVoid* reserved);
SIM_DLLEXPORT simInt simGetQHull(const simFloat* inVertices,simInt inVerticesL,simFloat** verticesOut,simInt* verticesOutL,simInt** indicesOut,simInt* indicesOutL,simInt reserved1,const simFloat* reserved2);
SIM_DLLEXPORT simInt simGetDecimatedMesh(const simFloat* inVertices,simInt inVerticesL,const simInt* inIndices,simInt inIndicesL,simFloat** verticesOut,simInt* verticesOutL,simInt** indicesOut,simInt* indicesOutL,simFloat decimationPercent,simInt reserved1,const simFloat* reserved2);
SIM_DLLEXPORT simInt simComputeMassAndInertia(simInt shapeHandle,simFloat density);
SIM_DLLEXPORT simFloat simGetEngineFloatParam(simInt paramId,simInt objectHandle,const simVoid* object,simBool* ok);
SIM_DLLEXPORT simInt simSetEngineFloatParam(simInt paramId,simInt objectHandle,const simVoid* object,simFloat val);
SIM_DLLEXPORT simInt simCreateOctree(simFloat voxelSize,simInt options,simFloat pointSize,simVoid* reserved);
SIM_DLLEXPORT simInt simCreatePointCloud(simFloat maxVoxelSize,simInt maxPtCntPerVoxel,simInt options,simFloat pointSize,simVoid* reserved);
SIM_DLLEXPORT simInt simSetPointCloudOptions(simInt pointCloudHandle,simFloat maxVoxelSize,simInt maxPtCntPerVoxel,simInt options,simFloat pointSize,simVoid* reserved);
SIM_DLLEXPORT simInt simGetPointCloudOptions(simInt pointCloudHandle,simFloat* maxVoxelSize,simInt* maxPtCntPerVoxel,simInt* options,simFloat* pointSize,simVoid* reserved);
SIM_DLLEXPORT simInt simInsertVoxelsIntoOctree(simInt octreeHandle,simInt options,const simFloat* pts,simInt ptCnt,const simUChar* color,const simUInt* tag,simVoid* reserved);
SIM_DLLEXPORT simInt simRemoveVoxelsFromOctree(simInt octreeHandle,simInt options,const simFloat* pts,simInt ptCnt,simVoid* reserved);
SIM_DLLEXPORT simInt simInsertPointsIntoPointCloud(simInt pointCloudHandle,simInt options,const simFloat* pts,simInt ptCnt,const simUChar* color,simVoid* optionalValues);
SIM_DLLEXPORT simInt simRemovePointsFromPointCloud(simInt pointCloudHandle,simInt options,const simFloat* pts,simInt ptCnt,simFloat tolerance,simVoid* reserved);
SIM_DLLEXPORT simInt simIntersectPointsWithPointCloud(simInt pointCloudHandle,simInt options,const simFloat* pts,simInt ptCnt,simFloat tolerance,simVoid* reserved);
SIM_DLLEXPORT const simFloat* simGetOctreeVoxels(simInt octreeHandle,simInt* ptCnt,simVoid* reserved);
SIM_DLLEXPORT const simFloat* simGetPointCloudPoints(simInt pointCloudHandle,simInt* ptCnt,simVoid* reserved);
SIM_DLLEXPORT simInt simInsertObjectIntoPointCloud(simInt pointCloudHandle,simInt objectHandle,simInt options,simFloat gridSize,const simUChar* color,simVoid* optionalValues);
SIM_DLLEXPORT simInt simSubtractObjectFromPointCloud(simInt pointCloudHandle,simInt objectHandle,simInt options,simFloat tolerance,simVoid* reserved);
SIM_DLLEXPORT simInt simCheckOctreePointOccupancy(simInt octreeHandle,simInt options,const simFloat* points,simInt ptCnt,simUInt* tag,simUInt64* location,simVoid* reserved);
SIM_DLLEXPORT simInt simApplyTexture(simInt shapeHandle,const simFloat* textureCoordinates,simInt textCoordSize,const simUChar* texture,const simInt* textureResolution,simInt options);
SIM_DLLEXPORT simInt simSetJointDependency(simInt jointHandle,simInt masterJointHandle,simFloat offset,simFloat multCoeff);
SIM_DLLEXPORT simInt simGetJointDependency(simInt jointHandle,simInt* masterJointHandle,simFloat* offset,simFloat* multCoeff);
SIM_DLLEXPORT simInt simGetShapeMass(simInt shapeHandle,simFloat* mass);
SIM_DLLEXPORT simInt simSetShapeMass(simInt shapeHandle,simFloat mass);
SIM_DLLEXPORT simInt simGetShapeInertia(simInt shapeHandle,simFloat* inertiaMatrix,simFloat* transformationMatrix);
SIM_DLLEXPORT simInt simSetShapeInertia(simInt shapeHandle,const simFloat* inertiaMatrix,const simFloat* transformationMatrix);
SIM_DLLEXPORT simInt simGenerateShapeFromPath(const simFloat* path,simInt pathSize,const simFloat* section,simInt sectionSize,simInt options,const simFloat* upVector,simFloat reserved);
SIM_DLLEXPORT simFloat simGetClosestPosOnPath(const simFloat* path,simInt pathSize,const simFloat* pathLengths,const simFloat* absPt);
SIM_DLLEXPORT simInt simExtCallScriptFunction(simInt scriptHandleOrType, const simChar* functionNameAtScriptName,
                                               const simInt* inIntData, simInt inIntCnt,
                                               const simFloat* inFloatData, simInt inFloatCnt,
                                               const simChar** inStringData, simInt inStringCnt,
                                               const simChar* inBufferData, simInt inBufferCnt,
                                               simInt** outIntData, simInt* outIntCnt,
                                               simFloat** outFloatData, simInt* outFloatCnt,
                                               simChar*** outStringData, simInt* outStringCnt,
                                               simChar** outBufferData, simInt* outBufferSize);
// Following will not be supported in single-precision mode anymore, once we switch to double precision mode:
SIM_DLLEXPORT simVoid _simGetObjectLocalTransformation(const simVoid* object,simFloat* pos,simFloat* quat,simBool excludeFirstJointTransformation);
SIM_DLLEXPORT simVoid _simSetObjectLocalTransformation(simVoid* object,const simFloat* pos,const simFloat* quat,simFloat simTime);
SIM_DLLEXPORT simVoid _simDynReportObjectCumulativeTransformation(simVoid* object,const simFloat* pos,const simFloat* quat,simFloat simTime);
SIM_DLLEXPORT simVoid _simSetObjectCumulativeTransformation(simVoid* object,const simFloat* pos,const simFloat* quat,simBool keepChildrenInPlace);
SIM_DLLEXPORT simVoid _simGetObjectCumulativeTransformation(const simVoid* object,simFloat* pos,simFloat* quat,simBool excludeFirstJointTransformation);
SIM_DLLEXPORT simVoid _simSetJointVelocity(const simVoid* joint,simFloat vel);
SIM_DLLEXPORT simVoid _simSetJointPosition(const simVoid* joint,simFloat pos);
SIM_DLLEXPORT simFloat _simGetJointPosition(const simVoid* joint);
SIM_DLLEXPORT simVoid _simSetDynamicMotorPositionControlTargetPosition(const simVoid* joint,simFloat pos);
SIM_DLLEXPORT simVoid _simGetInitialDynamicVelocity(const simVoid* shape,simFloat* vel);
SIM_DLLEXPORT simVoid _simSetInitialDynamicVelocity(simVoid* shape,const simFloat* vel);
SIM_DLLEXPORT simVoid _simGetInitialDynamicAngVelocity(const simVoid* shape,simFloat* angularVel);
SIM_DLLEXPORT simVoid _simSetInitialDynamicAngVelocity(simVoid* shape,const simFloat* angularVel);
SIM_DLLEXPORT simVoid _simSetShapeDynamicVelocity(simVoid* shape,const simFloat* linear,const simFloat* angular,simFloat simTime);
SIM_DLLEXPORT simVoid _simGetAdditionalForceAndTorque(const simVoid* shape,simFloat* force,simFloat* torque);
SIM_DLLEXPORT simBool _simGetJointPositionInterval(const simVoid* joint,simFloat* minValue,simFloat* rangeValue);
SIM_DLLEXPORT simFloat _simGetDynamicMotorTargetPosition(const simVoid* joint);
SIM_DLLEXPORT simFloat _simGetDynamicMotorTargetVelocity(const simVoid* joint);
SIM_DLLEXPORT simFloat _simGetDynamicMotorMaxForce(const simVoid* joint);
SIM_DLLEXPORT simFloat _simGetDynamicMotorUpperLimitVelocity(const simVoid* joint);
SIM_DLLEXPORT simVoid _simSetDynamicMotorReflectedPositionFromDynamicEngine(simVoid* joint,simFloat pos,simFloat simTime);
SIM_DLLEXPORT simVoid _simSetJointSphericalTransformation(simVoid* joint,const simFloat* quat,simFloat simTime);
SIM_DLLEXPORT simVoid _simAddForceSensorCumulativeForcesAndTorques(simVoid* forceSensor,const simFloat* force,const simFloat* torque,int totalPassesCount,simFloat simTime);
SIM_DLLEXPORT simVoid _simAddJointCumulativeForcesOrTorques(simVoid* joint,simFloat forceOrTorque,int totalPassesCount,simFloat simTime);
SIM_DLLEXPORT simFloat _simGetMass(const simVoid* geomInfo);
SIM_DLLEXPORT simFloat _simGetLocalInertiaInfo(const simVoid* object,simFloat* pos,simFloat* quat,simFloat* diagI);
SIM_DLLEXPORT simVoid _simGetPurePrimitiveSizes(const simVoid* geometric,simFloat* sizes);
SIM_DLLEXPORT simVoid _simGetVerticesLocalFrame(const simVoid* geometric,simFloat* pos,simFloat* quat);
SIM_DLLEXPORT const simFloat* _simGetHeightfieldData(const simVoid* geometric,simInt* xCount,simInt* yCount,simFloat* minHeight,simFloat* maxHeight);
SIM_DLLEXPORT simVoid _simGetCumulativeMeshes(const simVoid* geomInfo,simFloat** vertices,simInt* verticesSize,simInt** indices,simInt* indicesSize);
SIM_DLLEXPORT simVoid _simGetGravity(simFloat* gravity);
SIM_DLLEXPORT simBool _simGetDistanceBetweenEntitiesIfSmaller(simInt entity1ID,simInt entity2ID,simFloat* distance,simFloat* ray,simInt* cacheBuffer,simBool overrideMeasurableFlagIfNonCollection1,simBool overrideMeasurableFlagIfNonCollection2,simBool pathPlanningRoutineCalling);
SIM_DLLEXPORT simInt _simHandleJointControl(const simVoid* joint,simInt auxV,const simInt* inputValuesInt,const simFloat* inputValuesFloat,simFloat* outputValues);
SIM_DLLEXPORT simInt _simHandleCustomContact(simInt objHandle1,simInt objHandle2,simInt engine,simInt* dataInt,simFloat* dataFloat);
SIM_DLLEXPORT simFloat _simGetPureHollowScaling(const simVoid* geometric);
SIM_DLLEXPORT simVoid _simDynCallback(const simInt* intData,const simFloat* floatData);

// Deprecated begin
SIM_DLLEXPORT simInt simGetMaterialId(const simChar* materialName);
SIM_DLLEXPORT simInt simGetShapeMaterial(simInt shapeHandle);
SIM_DLLEXPORT simInt simHandleVarious();
SIM_DLLEXPORT simInt simSerialPortOpen(simInt portNumber,simInt baudRate,simVoid* reserved1,simVoid* reserved2);
SIM_DLLEXPORT simInt simSerialPortClose(simInt portNumber);
SIM_DLLEXPORT simInt simSerialPortSend(simInt portNumber,const simChar* data,simInt dataLength);
SIM_DLLEXPORT simInt simSerialPortRead(simInt portNumber,simChar* buffer,simInt dataLengthToRead);
SIM_DLLEXPORT simInt simGetPathPlanningHandle(const simChar* pathPlanningObjectName);
SIM_DLLEXPORT simInt simGetMotionPlanningHandle(const simChar* motionPlanningObjectName);
SIM_DLLEXPORT simInt simRemoveMotionPlanning(simInt motionPlanningHandle);
SIM_DLLEXPORT simInt simPerformPathSearchStep(simInt temporaryPathSearchObject,simBool abortSearch);
SIM_DLLEXPORT simInt simLockInterface(simBool locked);
SIM_DLLEXPORT simInt simCopyPasteSelectedObjects();
SIM_DLLEXPORT simInt simResetPath(simInt pathHandle);
SIM_DLLEXPORT simInt simResetJoint(simInt jointHandle);
SIM_DLLEXPORT simInt simAppendScriptArrayEntry(const simChar* reservedSetToNull,simInt scriptHandleOrType,const simChar* arrayNameAtScriptName,const simChar* keyName,const simChar* data,const simInt* what);
SIM_DLLEXPORT simInt simClearScriptVariable(const simChar* reservedSetToNull,simInt scriptHandleOrType,const simChar* variableNameAtScriptName);
SIM_DLLEXPORT simInt simAddSceneCustomData(simInt header,const simChar* data,simInt dataLength);
SIM_DLLEXPORT simInt simGetSceneCustomDataLength(simInt header);
SIM_DLLEXPORT simInt simGetSceneCustomData(simInt header,simChar* data);
SIM_DLLEXPORT simInt simAddObjectCustomData(simInt objectHandle,simInt header,const simChar* data,simInt dataLength);
SIM_DLLEXPORT simInt simGetObjectCustomDataLength(simInt objectHandle,simInt header);
SIM_DLLEXPORT simInt simGetObjectCustomData(simInt objectHandle,simInt header,simChar* data);
SIM_DLLEXPORT simInt simCreateUI(const simChar* uiName,simInt menuAttributes,const simInt* clientSize,const simInt* cellSize,simInt* buttonHandles);
SIM_DLLEXPORT simInt simCreateUIButton(simInt uiHandle,const simInt* position,const simInt* size,simInt buttonProperty);
SIM_DLLEXPORT simInt simGetUIHandle(const simChar* uiName);
SIM_DLLEXPORT simInt simGetUIProperty(simInt uiHandle);
SIM_DLLEXPORT simInt simGetUIEventButton(simInt uiHandle,simInt* auxiliaryValues);
SIM_DLLEXPORT simInt simSetUIProperty(simInt uiHandle,simInt elementProperty);
SIM_DLLEXPORT simInt simGetUIButtonProperty(simInt uiHandle,simInt buttonHandle);
SIM_DLLEXPORT simInt simSetUIButtonProperty(simInt uiHandle,simInt buttonHandle,simInt buttonProperty);
SIM_DLLEXPORT simInt simGetUIButtonSize(simInt uiHandle,simInt buttonHandle,simInt* size);
SIM_DLLEXPORT simInt simSetUIButtonLabel(simInt uiHandle,simInt buttonHandle,const simChar* upStateLabel,const simChar* downStateLabel);
SIM_DLLEXPORT simChar* simGetUIButtonLabel(simInt uiHandle,simInt buttonHandle);
SIM_DLLEXPORT simInt simSetUISlider(simInt uiHandle,simInt buttonHandle,simInt position);
SIM_DLLEXPORT simInt simGetUISlider(simInt uiHandle,simInt buttonHandle);
SIM_DLLEXPORT simInt simSetUIButtonTexture(simInt uiHandle,simInt buttonHandle,const simInt* size,const simChar* textureData);
SIM_DLLEXPORT simInt simCreateUIButtonArray(simInt uiHandle,simInt buttonHandle);
SIM_DLLEXPORT simInt simDeleteUIButtonArray(simInt uiHandle,simInt buttonHandle);
SIM_DLLEXPORT simInt simRemoveUI(simInt uiHandle);
SIM_DLLEXPORT simInt simSetUIPosition(simInt uiHandle,const simInt* position);
SIM_DLLEXPORT simInt simGetUIPosition(simInt uiHandle,simInt* position);
SIM_DLLEXPORT simInt simLoadUI(const simChar* filename,simInt maxCount,simInt* uiHandles);
SIM_DLLEXPORT simInt simSaveUI(simInt count,const simInt* uiHandles,const simChar* filename);
SIM_DLLEXPORT simInt simHandleGeneralCallbackScript(simInt callbackId,simInt callbackTag,simVoid* additionalData);
SIM_DLLEXPORT simInt simRegisterCustomLuaFunction(const simChar* funcName,const simChar* callTips,const simInt* inputArgumentTypes,simVoid(*callBack)(struct SLuaCallBack* p));
SIM_DLLEXPORT simInt simRegisterCustomLuaVariable(const simChar* varName,const simChar* varValue);
SIM_DLLEXPORT simInt simGetMechanismHandle(const simChar* mechanismName);
SIM_DLLEXPORT simInt simHandleMechanism(simInt mechanismHandle);
SIM_DLLEXPORT simInt simHandleCustomizationScripts(simInt callType);
SIM_DLLEXPORT simInt simCallScriptFunction(simInt scriptHandleOrType,const simChar* functionNameAtScriptName,SLuaCallBack* data,const simChar* reservedSetToNull);
SIM_DLLEXPORT simChar* simGetScriptSimulationParameter(simInt scriptHandle,const simChar* parameterName,simInt* parameterLength);
SIM_DLLEXPORT simInt simSetScriptSimulationParameter(simInt scriptHandle,const simChar* parameterName,const simChar* parameterValue,simInt parameterLength);
SIM_DLLEXPORT simInt simResetMill(simInt millHandle);
SIM_DLLEXPORT simInt simResetMilling(simInt objectHandle);
SIM_DLLEXPORT simInt simApplyMilling(simInt objectHandle);
SIM_DLLEXPORT simInt simGetNameSuffix(const simChar* name);
SIM_DLLEXPORT simInt simSetNameSuffix(simInt nameSuffixNumber);
SIM_DLLEXPORT simInt simAddStatusbarMessage(const simChar* message);
SIM_DLLEXPORT simChar* simGetScriptRawBuffer(simInt scriptHandle,simInt bufferHandle);
SIM_DLLEXPORT simInt simSetScriptRawBuffer(simInt scriptHandle,const simChar* buffer,simInt bufferSize);
SIM_DLLEXPORT simInt simReleaseScriptRawBuffer(simInt scriptHandle,simInt bufferHandle);
SIM_DLLEXPORT simInt simRemoveIkGroup(simInt ikGroupHandle);
SIM_DLLEXPORT simInt simExportIk(const simChar* pathAndFilename,simInt reserved1,simVoid* reserved2);
SIM_DLLEXPORT simInt simComputeJacobian(simInt ikGroupHandle,simInt options,simVoid* reserved);
SIM_DLLEXPORT simInt simGetIkGroupHandle(const simChar* ikGroupName);
SIM_DLLEXPORT simInt simHandleIkGroup(simInt ikGroupHandle);
SIM_DLLEXPORT simInt simSetThreadIsFree(simBool freeMode);
SIM_DLLEXPORT simInt simTubeOpen(simInt dataHeader,const simChar* dataName,simInt readBufferSize,simBool notUsedButKeepZero);
SIM_DLLEXPORT simInt simTubeClose(simInt tubeHandle);
SIM_DLLEXPORT simInt simTubeWrite(simInt tubeHandle,const simChar* data,simInt dataLength);
SIM_DLLEXPORT simChar* simTubeRead(simInt tubeHandle,simInt* dataLength);
SIM_DLLEXPORT simInt simTubeStatus(simInt tubeHandle,simInt* readPacketsCount,simInt* writePacketsCount);
SIM_DLLEXPORT simChar* simReceiveData(simInt dataHeader,const simChar* dataName,simInt antennaHandle,simInt index,simInt* dataLength,simInt* senderID,simInt* dataHeaderR,simChar** dataNameR);
SIM_DLLEXPORT simInt simInsertPathCtrlPoints(simInt pathHandle,simInt options,simInt startIndex,simInt ptCnt,const simVoid* ptData);
SIM_DLLEXPORT simInt simCutPathCtrlPoints(simInt pathHandle,simInt startIndex,simInt ptCnt);
SIM_DLLEXPORT simInt simGetThreadId();
SIM_DLLEXPORT simInt simSwitchThread();
SIM_DLLEXPORT simInt simLockResources(simInt lockType,simInt reserved);
SIM_DLLEXPORT simInt simUnlockResources(simInt lockHandle);
SIM_DLLEXPORT simChar* simGetUserParameter(simInt objectHandle,const simChar* parameterName,simInt* parameterLength);
SIM_DLLEXPORT simInt simSetUserParameter(simInt objectHandle,const simChar* parameterName,const simChar* parameterValue,simInt parameterLength);
SIM_DLLEXPORT simInt simGetCollectionHandle(const simChar* collectionName);
SIM_DLLEXPORT simInt simRemoveCollection(simInt collectionHandle);
SIM_DLLEXPORT simInt simEmptyCollection(simInt collectionHandle);
SIM_DLLEXPORT simChar* simGetCollectionName(simInt collectionHandle);
SIM_DLLEXPORT simInt simSetCollectionName(simInt collectionHandle,const simChar* collectionName);
SIM_DLLEXPORT simInt simCreateCollection(const simChar* collectionName,simInt options);
SIM_DLLEXPORT simInt simAddObjectToCollection(simInt collectionHandle,simInt objectHandle,simInt what,simInt options);
SIM_DLLEXPORT simInt simGetCollisionHandle(const simChar* collisionObjectName);
SIM_DLLEXPORT simInt simGetDistanceHandle(const simChar* distanceObjectName);
SIM_DLLEXPORT simInt simResetCollision(simInt collisionObjectHandle);
SIM_DLLEXPORT simInt simResetDistance(simInt distanceObjectHandle);
SIM_DLLEXPORT simInt simHandleCollision(simInt collisionObjectHandle);
SIM_DLLEXPORT simInt simReadCollision(simInt collisionObjectHandle);
SIM_DLLEXPORT simInt simRemoveBanner(simInt bannerID);
SIM_DLLEXPORT simInt simGetObjectIntParameter(simInt objectHandle,simInt ParamID,simInt* Param);
SIM_DLLEXPORT simInt simSetObjectIntParameter(simInt objectHandle,simInt ParamID,simInt Param);
SIM_DLLEXPORT simInt simGetObjectInt32Parameter(simInt objectHandle,simInt ParamID,simInt* Param);
SIM_DLLEXPORT simInt simSetObjectInt32Parameter(simInt objectHandle,simInt ParamID,simInt Param);
SIM_DLLEXPORT simChar* simGetObjectStringParameter(simInt objectHandle,simInt ParamID,simInt* ParamLength);
SIM_DLLEXPORT simInt simSetObjectStringParameter(simInt objectHandle,simInt ParamID,const simChar* Param,simInt ParamLength);
SIM_DLLEXPORT simInt simSetBooleanParameter(simInt parameter,simBool boolState);
SIM_DLLEXPORT simInt simGetBooleanParameter(simInt parameter);
SIM_DLLEXPORT simInt simSetBoolParameter(simInt parameter,simBool boolState);
SIM_DLLEXPORT simInt simGetBoolParameter(simInt parameter);
SIM_DLLEXPORT simInt simSetIntegerParameter(simInt parameter,simInt intState);
SIM_DLLEXPORT simInt simGetIntegerParameter(simInt parameter,simInt* intState);
SIM_DLLEXPORT simInt simSetInt32Parameter(simInt parameter,simInt intState);
SIM_DLLEXPORT simInt simGetInt32Parameter(simInt parameter,simInt* intState);
SIM_DLLEXPORT simInt simGetUInt64Parameter(simInt parameter,simUInt64* intState);
SIM_DLLEXPORT simInt simSetStringParameter(simInt parameter,const simChar* str);
SIM_DLLEXPORT simChar* simGetStringParameter(simInt parameter);
SIM_DLLEXPORT simInt simSetArrayParameter(simInt parameter,const simVoid* arrayOfValues);
SIM_DLLEXPORT simInt simGetArrayParameter(simInt parameter,simVoid* arrayOfValues);
SIM_DLLEXPORT simInt simGetEngineInt32Parameter(simInt paramId,simInt objectHandle,const simVoid* object,simBool* ok);
SIM_DLLEXPORT simBool simGetEngineBoolParameter(simInt paramId,simInt objectHandle,const simVoid* object,simBool* ok);
SIM_DLLEXPORT simInt simSetEngineInt32Parameter(simInt paramId,simInt objectHandle,const simVoid* object,simInt val);
SIM_DLLEXPORT simInt simSetEngineBoolParameter(simInt paramId,simInt objectHandle,const simVoid* object,simBool val);
SIM_DLLEXPORT simInt simIsHandleValid(simInt generalObjectHandle,simInt generalObjectType);
SIM_DLLEXPORT simInt simAddModuleMenuEntry(const simChar* entryLabel,simInt itemCount,simInt* itemHandles);
SIM_DLLEXPORT simInt simSetModuleMenuItemState(simInt itemHandle,simInt state,const simChar* label);
SIM_DLLEXPORT simInt simSetIntegerSignal(const simChar* signalName,simInt signalValue);
SIM_DLLEXPORT simInt simGetIntegerSignal(const simChar* signalName,simInt* signalValue);
SIM_DLLEXPORT simInt simClearIntegerSignal(const simChar* signalName);
SIM_DLLEXPORT simChar* simGetObjectName(simInt objectHandle);
SIM_DLLEXPORT simInt simSetObjectName(simInt objectHandle,const simChar* objectName);
SIM_DLLEXPORT simChar* simGetScriptName(simInt scriptHandle);
SIM_DLLEXPORT simInt simGetScriptHandle(const simChar* scriptName);
SIM_DLLEXPORT simInt simSetScriptVariable(simInt scriptHandleOrType,const simChar* variableNameAtScriptName,simInt stackHandle);
SIM_DLLEXPORT simInt simGetObjectHandle(const simChar* objectAlias);
SIM_DLLEXPORT simInt simGetObjectHandleEx(const simChar* objectAlias,simInt index,simInt proxy,simInt options);
SIM_DLLEXPORT simInt simGetScript(simInt index);
SIM_DLLEXPORT simInt simGetScriptAssociatedWithObject(simInt objectHandle);
SIM_DLLEXPORT simInt simGetCustomizationScriptAssociatedWithObject(simInt objectHandle);
SIM_DLLEXPORT simInt simGetObjectAssociatedWithScript(simInt scriptHandle);
SIM_DLLEXPORT simChar* simGetObjectConfiguration(simInt objectHandle);
SIM_DLLEXPORT simInt simSetObjectConfiguration(const simChar* data);
SIM_DLLEXPORT simChar* simGetConfigurationTree(simInt objectHandle);
SIM_DLLEXPORT simInt simSetConfigurationTree(const simChar* data);
SIM_DLLEXPORT simInt simEnableEventCallback(simInt eventCallbackType,const simChar* plugin,simInt reserved);
SIM_DLLEXPORT simInt simRMLPosition(simInt dofs,simDouble timeStep,simInt flags,const simDouble* currentPosVelAccel,const simDouble* maxVelAccelJerk,const simBool* selection,const simDouble* targetPosVel,simDouble* newPosVelAccel,simVoid* auxData);
SIM_DLLEXPORT simInt simRMLVelocity(simInt dofs,simDouble timeStep,simInt flags,const simDouble* currentPosVelAccel,const simDouble* maxAccelJerk,const simBool* selection,const simDouble* targetVel,simDouble* newPosVelAccel,simVoid* auxData);
SIM_DLLEXPORT simInt simRMLPos(simInt dofs,simDouble smallestTimeStep,simInt flags,const simDouble* currentPosVelAccel,const simDouble* maxVelAccelJerk,const simBool* selection,const simDouble* targetPosVel,simVoid* auxData);
SIM_DLLEXPORT simInt simRMLVel(simInt dofs,simDouble smallestTimeStep,simInt flags,const simDouble* currentPosVelAccel,const simDouble* maxAccelJerk,const simBool* selection,const simDouble* targetVel,simVoid* auxData);
SIM_DLLEXPORT simInt simRMLStep(simInt handle,simDouble timeStep,simDouble* newPosVelAccel,simVoid* auxData,simVoid* reserved);
SIM_DLLEXPORT simInt simRMLRemove(simInt handle);
SIM_DLLEXPORT simInt simGetSystemTimeInMilliseconds();
SIM_DLLEXPORT simUInt simGetSystemTimeInMs(simInt previousTime);
SIM_DLLEXPORT simChar* simFileDialog(simInt mode,const simChar* title,const simChar* startPath,const simChar* initName,const simChar* extName,const simChar* ext);
SIM_DLLEXPORT simInt simMsgBox(simInt dlgType,simInt buttons,const simChar* title,const simChar* message);
SIM_DLLEXPORT simInt simGetDialogResult(simInt genericDialogHandle);
SIM_DLLEXPORT simChar* simGetDialogInput(simInt genericDialogHandle);
SIM_DLLEXPORT simInt simEndDialog(simInt genericDialogHandle);
SIM_DLLEXPORT simInt simIsObjectInSelection(simInt objectHandle);
SIM_DLLEXPORT simInt simAddObjectToSelection(simInt what,simInt objectHandle);
SIM_DLLEXPORT simInt simRemoveObjectFromSelection(simInt what,simInt objectHandle);
SIM_DLLEXPORT simInt simGetObjectSelectionSize();
SIM_DLLEXPORT simInt simGetObjectLastSelection();
SIM_DLLEXPORT simInt simGetObjectSelection(simInt* objectHandles);
SIM_DLLEXPORT simInt simDeleteSelectedObjects();
SIM_DLLEXPORT simInt simSetStringNamedParam(const simChar* paramName,const simChar* stringParam,simInt paramLength);
SIM_DLLEXPORT simChar* simGetStringNamedParam(const simChar* paramName,simInt* paramLength);
SIM_DLLEXPORT simInt simGetObjectUniqueIdentifier(simInt objectHandle,simInt* uniqueIdentifier);
SIM_DLLEXPORT simInt simBreakForceSensor(simInt objectHandle);
SIM_DLLEXPORT simInt simSetScriptText(simInt scriptHandle,const simChar* scriptText);
SIM_DLLEXPORT const simChar* simGetScriptText(simInt scriptHandle);
SIM_DLLEXPORT simInt simGetScriptProperty(simInt scriptHandle,simInt* scriptProperty,simInt* associatedObjectHandle);
SIM_DLLEXPORT simInt simRemoveObject(simInt objectHandle);
SIM_DLLEXPORT simInt simGetVisionSensorResolution(simInt visionSensorHandle,simInt* resolution);
SIM_DLLEXPORT simUChar* simGetVisionSensorCharImage(simInt visionSensorHandle,simInt* resolutionX,simInt* resolutionY);
SIM_DLLEXPORT simInt simSetVisionSensorCharImage(simInt visionSensorHandle,const simUChar* image);
SIM_DLLEXPORT simVoid* simBroadcastMessage(simInt* auxiliaryData,simVoid* customData,simInt* replyData);
SIM_DLLEXPORT simVoid* simSendModuleMessage(simInt message,simInt* auxiliaryData,simVoid* customData,simInt* replyData);
SIM_DLLEXPORT simInt simSetDoubleSignal(const simChar* signalName,simDouble signalValue);
SIM_DLLEXPORT simInt simGetDoubleSignal(const simChar* signalName,simDouble* signalValue);
SIM_DLLEXPORT simInt simClearDoubleSignal(const simChar* signalName);
SIM_DLLEXPORT simInt simRemoveParticleObject(simInt objectHandle);
SIM_DLLEXPORT simBool _simGetBulletStickyContact(const simVoid* geomInfo);
SIM_DLLEXPORT simBool _simGetParentFollowsDynamic(const simVoid* shape);
SIM_DLLEXPORT simVoid _simSetDynamicJointLocalTransformationPart2IsValid(simVoid* joint,simBool valid);
SIM_DLLEXPORT simVoid _simSetDynamicForceSensorLocalTransformationPart2IsValid(simVoid* forceSensor,simBool valid);
SIM_DLLEXPORT simBool _simIsForceSensorBroken(const simVoid* forceSensor);
SIM_DLLEXPORT simVoid _simSetGeomProxyDynamicsFullRefreshFlag(simVoid* geomData,simBool flag);
SIM_DLLEXPORT simBool _simGetGeomProxyDynamicsFullRefreshFlag(const simVoid* geomData);
SIM_DLLEXPORT simVoid _simSetShapeIsStaticAndNotRespondableButDynamicTag(const simVoid* shape,simBool tag);
SIM_DLLEXPORT simBool _simGetShapeIsStaticAndNotRespondableButDynamicTag(const simVoid* shape);
SIM_DLLEXPORT simBool _simIsDynamicMotorEnabled(const simVoid* joint);
SIM_DLLEXPORT simBool _simIsDynamicMotorPositionCtrlEnabled(const simVoid* joint);
SIM_DLLEXPORT simBool _simIsDynamicMotorTorqueModulationEnabled(const simVoid* joint);
SIM_DLLEXPORT simInt _simGetContactCallbackCount();
SIM_DLLEXPORT const void* _simGetContactCallback(simInt index);
SIM_DLLEXPORT simInt _simGetJointCallbackCallOrder(const simVoid* joint);


/* deprecated, double and single precision functions (compatibility): */
// double:
#ifdef switchToDouble
SIM_DLLEXPORT simInt simCreateMotionPlanning_D(simInt jointCnt,const simInt* jointHandles,const simInt* jointRangeSubdivisions,const simDouble* jointMetricWeights,simInt options,const simInt* intParams,const simDouble* floatParams,const simVoid* reserved);
SIM_DLLEXPORT simInt simAddParticleObject_D(simInt objectType,simDouble size,simDouble density,const simVoid* params,simDouble lifeTime,simInt maxItemCount,const simDouble* color,const simDouble* setToNULL,const simDouble* setToNULL2,const simDouble* setToNULL3);
SIM_DLLEXPORT simInt simAddParticleObjectItem_D(simInt objectHandle,const simDouble* itemData);
SIM_DLLEXPORT simInt simJointGetForce_D(simInt jointHandle,simDouble* forceOrTorque);
SIM_DLLEXPORT simInt simGetMpConfigForTipPose_D(simInt motionPlanningObjectHandle,simInt options,simDouble closeNodesDistance,simInt trialCount,const simDouble* tipPose,simInt maxTimeInMs,simDouble* outputJointPositions,const simDouble* referenceConfigs,simInt referenceConfigCount,const simDouble* jointWeights,const simInt* jointBehaviour,simInt correctionPasses);
SIM_DLLEXPORT simDouble* simFindMpPath_D(simInt motionPlanningObjectHandle,const simDouble* startConfig,const simDouble* goalConfig,simInt options,simDouble stepSize,simInt* outputConfigsCnt,simInt maxTimeInMs,simDouble* reserved,const simInt* auxIntParams,const simDouble* auxFloatParams);
SIM_DLLEXPORT simDouble* simSimplifyMpPath_D(simInt motionPlanningObjectHandle,const simDouble* pathBuffer,simInt configCnt,simInt options,simDouble stepSize,simInt increment,simInt* outputConfigsCnt,simInt maxTimeInMs,simDouble* reserved,const simInt* auxIntParams,const simDouble* auxFloatParams);
SIM_DLLEXPORT simDouble* simFindIkPath_D(simInt motionPlanningObjectHandle,const simDouble* startConfig,const simDouble* goalPose,simInt options,simDouble stepSize,simInt* outputConfigsCnt,simDouble* reserved,const simInt* auxIntParams,const simDouble* auxFloatParams);
SIM_DLLEXPORT simDouble* simGetMpConfigTransition_D(simInt motionPlanningObjectHandle,const simDouble* startConfig,const simDouble* goalConfig,simInt options,const simInt* select,simDouble calcStepSize,simDouble maxOutStepSize,simInt wayPointCnt,const simDouble* wayPoints,simInt* outputConfigsCnt,const simInt* auxIntParams,const simDouble* auxFloatParams);
SIM_DLLEXPORT simInt simSearchPath_D(simInt pathPlanningObjectHandle,simDouble maximumSearchTime);
SIM_DLLEXPORT simInt simInitializePathSearch_D(simInt pathPlanningObjectHandle,simDouble maximumSearchTime,simDouble searchTimeStep);
SIM_DLLEXPORT simInt simHandlePath_D(simInt pathHandle,simDouble deltaTime);
SIM_DLLEXPORT simInt simHandleJoint_D(simInt jointHandle,simDouble deltaTime);
SIM_DLLEXPORT simInt simSetUIButtonColor_D(simInt uiHandle,simInt buttonHandle,const simDouble* upStateColor,const simDouble* downStateColor,const simDouble* labelColor);
SIM_DLLEXPORT simInt simSetUIButtonArrayColor_D(simInt uiHandle,simInt buttonHandle,const simInt* position,const simDouble* color);
SIM_DLLEXPORT simInt simRegisterContactCallback_D(simInt(*callBack)(simInt,simInt,simInt,simInt*,simDouble*));
SIM_DLLEXPORT simInt simRegisterJointCtrlCallback_D(simInt(*callBack)(simInt,simInt,simInt,const simInt*,const simDouble*,simDouble*));
SIM_DLLEXPORT simInt simSetJointForce_D(simInt objectHandle,simDouble forceOrTorque);
SIM_DLLEXPORT simInt simHandleMill_D(simInt millHandle,simDouble* removedSurfaceAndVolume);
SIM_DLLEXPORT simInt simSetShapeMassAndInertia_D(simInt shapeHandle,simDouble mass,const simDouble* inertiaMatrix,const simDouble* centerOfMass,const simDouble* transformation);
SIM_DLLEXPORT simInt simGetShapeMassAndInertia_D(simInt shapeHandle,simDouble* mass,simDouble* inertiaMatrix,simDouble* centerOfMass,const simDouble* transformation);
SIM_DLLEXPORT simInt simCheckIkGroup_D(simInt ikGroupHandle,simInt jointCnt,const simInt* jointHandles,simDouble* jointValues,const simInt* jointOptions);
SIM_DLLEXPORT simInt simCreateIkGroup_D(simInt options,const simInt* intParams,const simDouble* floatParams,const simVoid* reserved);
SIM_DLLEXPORT simInt simCreateIkElement_D(simInt ikGroupHandle,simInt options,const simInt* intParams,const simDouble* floatParams,const simVoid* reserved);
SIM_DLLEXPORT simInt simGetConfigForTipPose_D(simInt ikGroupHandle,simInt jointCnt,const simInt* jointHandles,simDouble thresholdDist,simInt maxTimeInMs,simDouble* retConfig,const simDouble* metric,simInt collisionPairCnt,const simInt* collisionPairs,const simInt* jointOptions,const simDouble* lowLimits,const simDouble* ranges,simVoid* reserved);
SIM_DLLEXPORT simDouble* simGenerateIkPath_D(simInt ikGroupHandle,simInt jointCnt,const simInt* jointHandles,simInt ptCnt,simInt collisionPairCnt,const simInt* collisionPairs,const simInt* jointOptions,simVoid* reserved);
SIM_DLLEXPORT simDouble* simGetIkGroupMatrix_D(simInt ikGroupHandle,simInt options,simInt* matrixSize);
SIM_DLLEXPORT simInt simSetIkGroupProperties_D(simInt ikGroupHandle,simInt resolutionMethod,simInt maxIterations,simDouble damping,void* reserved);
SIM_DLLEXPORT simInt simSetIkElementProperties_D(simInt ikGroupHandle,simInt tipDummyHandle,simInt constraints,const simDouble* precision,const simDouble* weight,void* reserved);
SIM_DLLEXPORT simInt simSetVisionSensorFilter_D(simInt visionSensorHandle,simInt filterIndex,simInt options,const simInt* pSizes,const simUChar* bytes,const simInt* ints,const simDouble* floats,const simUChar* custom);
SIM_DLLEXPORT simInt simGetVisionSensorFilter_D(simInt visionSensorHandle,simInt filterIndex,simInt* options,simInt* pSizes,simUChar** bytes,simInt** ints,simDouble** floats,simUChar** custom);
SIM_DLLEXPORT simInt simGetPositionOnPath_D(simInt pathHandle,simDouble relativeDistance,simDouble* position);
SIM_DLLEXPORT simInt simGetDataOnPath_D(simInt pathHandle,simDouble relativeDistance,simInt dataType,simInt* intData,simDouble* floatData);
SIM_DLLEXPORT simInt simGetOrientationOnPath_D(simInt pathHandle,simDouble relativeDistance,simDouble* eulerAngles);
SIM_DLLEXPORT simInt simGetClosestPositionOnPath_D(simInt pathHandle,simDouble* absolutePosition,simDouble* pathPosition);
SIM_DLLEXPORT simInt simGetPathPosition_D(simInt objectHandle,simDouble* position);
SIM_DLLEXPORT simInt simSetPathPosition_D(simInt objectHandle,simDouble position);
SIM_DLLEXPORT simInt simGetPathLength_D(simInt objectHandle,simDouble* length);
SIM_DLLEXPORT simInt simCreatePath_D(simInt attributes,const simInt* intParams,const simDouble* floatParams,const simDouble* color);
SIM_DLLEXPORT simInt simSetPathTargetNominalVelocity_D(simInt objectHandle,simDouble targetNominalVelocity);
SIM_DLLEXPORT simInt simSendData_D(simInt targetID,simInt dataHeader,const simChar* dataName,const simChar* data,simInt dataLength,simInt antennaHandle,simDouble actionRadius,simDouble emissionAngle1,simDouble emissionAngle2,simDouble persistence);
SIM_DLLEXPORT simInt simHandleDistance_D(simInt distanceObjectHandle,simDouble* smallestDistance);
SIM_DLLEXPORT simInt simReadDistance_D(simInt distanceObjectHandle,simDouble* smallestDistance);
SIM_DLLEXPORT simInt simAddBanner_D(const simChar* label,simDouble size,simInt options,const simDouble* positionAndEulerAngles,simInt parentObjectHandle,const simDouble* labelColors,const simDouble* backgroundColors);
SIM_DLLEXPORT simInt simAddGhost_D(simInt ghostGroup,simInt objectHandle,simInt options,simDouble startTime,simDouble endTime,const simDouble* color);
SIM_DLLEXPORT simInt simModifyGhost_D(simInt ghostGroup,simInt ghostId,simInt operation,simDouble floatValue,simInt options,simInt optionsMask,const simDouble* colorOrTransformation);
SIM_DLLEXPORT simInt simSetGraphUserData_D(simInt graphHandle,const simChar* streamName,simDouble data);
SIM_DLLEXPORT simInt simAddPointCloud_D(simInt pageMask,simInt layerMask,simInt objectHandle,simInt options,simDouble pointSize,simInt ptCnt,const simDouble* pointCoordinates,const simChar* defaultColors,const simChar* pointColors,const simDouble* pointNormals);
SIM_DLLEXPORT simInt simModifyPointCloud_D(simInt pointCloudHandle,simInt operation,const simInt* intParam,const simDouble* floatParam);
SIM_DLLEXPORT simInt simCopyMatrix_D(const simDouble* matrixIn,simDouble* matrixOut);
SIM_DLLEXPORT simInt simGetObjectFloatParameter_D(simInt objectHandle,simInt ParamID,simDouble* Param);
SIM_DLLEXPORT simInt simSetObjectFloatParameter_D(simInt objectHandle,simInt ParamID,simDouble Param);
SIM_DLLEXPORT simInt simSetFloatingParameter_D(simInt parameter,simDouble floatState);
SIM_DLLEXPORT simInt simGetFloatingParameter_D(simInt parameter,simDouble* floatState);
SIM_DLLEXPORT simInt simSetFloatParameter_D(simInt parameter,simDouble floatState);
SIM_DLLEXPORT simInt simGetFloatParameter_D(simInt parameter,simDouble* floatState);
SIM_DLLEXPORT simDouble simGetEngineFloatParameter_D(simInt paramId,simInt objectHandle,const simVoid* object,simBool* ok);
SIM_DLLEXPORT simInt simSetEngineFloatParameter_D(simInt paramId,simInt objectHandle,const simVoid* object,simDouble val);
SIM_DLLEXPORT simInt simSetObjectSizeValues_D(simInt objectHandle,const simDouble* sizeValues);
SIM_DLLEXPORT simInt simGetObjectSizeValues_D(simInt objectHandle,simDouble* sizeValues);
SIM_DLLEXPORT simInt simDisplayDialog_D(const simChar* titleText,const simChar* mainText,simInt dialogType,const simChar* initialText,const simDouble* titleColors,const simDouble* dialogColors,simInt* elementHandle);
SIM_DLLEXPORT simInt simScaleSelectedObjects_D(simDouble scalingFactor,simBool scalePositionsToo);
SIM_DLLEXPORT simInt simGetJointMatrix_D(simInt objectHandle,simDouble* matrix);
SIM_DLLEXPORT simInt simSetSphericalJointMatrix_D(simInt objectHandle,const simDouble* matrix);
SIM_DLLEXPORT simInt simSetScriptAttribute_D(simInt scriptHandle,simInt attributeID,simDouble floatVal,simInt intOrBoolVal);
SIM_DLLEXPORT simInt simGetScriptAttribute_D(simInt scriptHandle,simInt attributeID,simDouble* floatVal,simInt* intOrBoolVal);
SIM_DLLEXPORT simInt simGetJointMaxForce_D(simInt jointHandle,simDouble* forceOrTorque);
SIM_DLLEXPORT simInt simSetJointMaxForce_D(simInt objectHandle,simDouble forceOrTorque);
SIM_DLLEXPORT simDouble* simGetVisionSensorImage_D(simInt visionSensorHandle);
SIM_DLLEXPORT simInt simSetVisionSensorImage_D(simInt visionSensorHandle,const simDouble* image);
SIM_DLLEXPORT int simSetVisionSensorDepthBuffer_D(simInt visionSensorHandle,const float* depthBuffer);
SIM_DLLEXPORT simInt simCreatePureShape_D(simInt primitiveType,simInt options,const simDouble* sizes,simDouble mass,const simInt* precision);
SIM_DLLEXPORT simInt simBuildMatrixQ_D(const simDouble* position,const simDouble* quaternion,simDouble* matrix);
SIM_DLLEXPORT simInt simGetQuaternionFromMatrix_D(const simDouble* matrix,simDouble* quaternion);
SIM_DLLEXPORT simInt simGetShapeVertex_D(simInt shapeHandle,simInt groupElementIndex,simInt vertexIndex,simDouble* relativePosition);
SIM_DLLEXPORT simInt simGetShapeTriangle_D(simInt shapeHandle,simInt groupElementIndex,simInt triangleIndex,simInt* vertexIndices,simDouble* triangleNormals);
SIM_DLLEXPORT simVoid _simGetJointOdeParameters_D(const simVoid* joint,simDouble* stopERP,simDouble* stopCFM,simDouble* bounce,simDouble* fudge,simDouble* normalCFM);
SIM_DLLEXPORT simVoid _simGetJointBulletParameters_D(const simVoid* joint,simDouble* stopERP,simDouble* stopCFM,simDouble* normalCFM);
SIM_DLLEXPORT simVoid _simGetOdeMaxContactFrictionCFMandERP_D(const simVoid* geomInfo,simInt* maxContacts,simDouble* friction,simDouble* cfm,simDouble* erp);
SIM_DLLEXPORT simBool _simGetBulletCollisionMargin_D(const simVoid* geomInfo,simDouble* margin,simInt* otherProp);
SIM_DLLEXPORT simDouble _simGetBulletRestitution_D(const simVoid* geomInfo);
SIM_DLLEXPORT simVoid _simGetVortexParameters_D(const simVoid* object,simInt version,simDouble* floatParams,simInt* intParams);
SIM_DLLEXPORT simVoid _simGetNewtonParameters_D(const simVoid* object,simInt* version,simDouble* floatParams,simInt* intParams);
SIM_DLLEXPORT simVoid _simGetDamping_D(const simVoid* geomInfo,simDouble* linDamping,simDouble* angDamping);
SIM_DLLEXPORT simDouble _simGetFriction_D(const simVoid* geomInfo);
SIM_DLLEXPORT simVoid _simSetDynamicJointLocalTransformationPart2_D(simVoid* joint,const simDouble* pos,const simDouble* quat);
SIM_DLLEXPORT simVoid _simSetDynamicForceSensorLocalTransformationPart2_D(simVoid* forceSensor,const simDouble* pos,const simDouble* quat);
SIM_DLLEXPORT simVoid _simGetDynamicForceSensorLocalTransformationPart2_D(const simVoid* forceSensor,simDouble* pos,simDouble* quat);
SIM_DLLEXPORT simVoid _simGetMotorPid_D(const simVoid* joint,simDouble* pParam,simDouble* iParam,simDouble* dParam);
SIM_DLLEXPORT simVoid _simGetPrincipalMomentOfInertia_D(const simVoid* geomInfo,simDouble* inertia);
SIM_DLLEXPORT simVoid _simGetLocalInertiaFrame_D(const simVoid* geomInfo,simDouble* pos,simDouble* quat);
#endif
// single:
SIM_DLLEXPORT simInt simCreateMotionPlanning(simInt jointCnt,const simInt* jointHandles,const simInt* jointRangeSubdivisions,const simFloat* jointMetricWeights,simInt options,const simInt* intParams,const simFloat* floatParams,const simVoid* reserved);
SIM_DLLEXPORT simInt simAddParticleObject(simInt objectType,simFloat size,simFloat density,const simVoid* params,simFloat lifeTime,simInt maxItemCount,const simFloat* color,const simFloat* setToNULL,const simFloat* setToNULL2,const simFloat* setToNULL3);
SIM_DLLEXPORT simInt simAddParticleObjectItem(simInt objectHandle,const simFloat* itemData);
SIM_DLLEXPORT simInt simJointGetForce(simInt jointHandle,simFloat* forceOrTorque);
SIM_DLLEXPORT simInt simGetMpConfigForTipPose(simInt motionPlanningObjectHandle,simInt options,simFloat closeNodesDistance,simInt trialCount,const simFloat* tipPose,simInt maxTimeInMs,simFloat* outputJointPositions,const simFloat* referenceConfigs,simInt referenceConfigCount,const simFloat* jointWeights,const simInt* jointBehaviour,simInt correctionPasses);
SIM_DLLEXPORT simFloat* simFindMpPath(simInt motionPlanningObjectHandle,const simFloat* startConfig,const simFloat* goalConfig,simInt options,simFloat stepSize,simInt* outputConfigsCnt,simInt maxTimeInMs,simFloat* reserved,const simInt* auxIntParams,const simFloat* auxFloatParams);
SIM_DLLEXPORT simFloat* simSimplifyMpPath(simInt motionPlanningObjectHandle,const simFloat* pathBuffer,simInt configCnt,simInt options,simFloat stepSize,simInt increment,simInt* outputConfigsCnt,simInt maxTimeInMs,simFloat* reserved,const simInt* auxIntParams,const simFloat* auxFloatParams);
SIM_DLLEXPORT simFloat* simFindIkPath(simInt motionPlanningObjectHandle,const simFloat* startConfig,const simFloat* goalPose,simInt options,simFloat stepSize,simInt* outputConfigsCnt,simFloat* reserved,const simInt* auxIntParams,const simFloat* auxFloatParams);
SIM_DLLEXPORT simFloat* simGetMpConfigTransition(simInt motionPlanningObjectHandle,const simFloat* startConfig,const simFloat* goalConfig,simInt options,const simInt* select,simFloat calcStepSize,simFloat maxOutStepSize,simInt wayPointCnt,const simFloat* wayPoints,simInt* outputConfigsCnt,const simInt* auxIntParams,const simFloat* auxFloatParams);
SIM_DLLEXPORT simInt simSearchPath(simInt pathPlanningObjectHandle,simFloat maximumSearchTime);
SIM_DLLEXPORT simInt simInitializePathSearch(simInt pathPlanningObjectHandle,simFloat maximumSearchTime,simFloat searchTimeStep);
SIM_DLLEXPORT simInt simHandlePath(simInt pathHandle,simFloat deltaTime);
SIM_DLLEXPORT simInt simHandleJoint(simInt jointHandle,simFloat deltaTime);
SIM_DLLEXPORT simInt simSetUIButtonColor(simInt uiHandle,simInt buttonHandle,const simFloat* upStateColor,const simFloat* downStateColor,const simFloat* labelColor);
SIM_DLLEXPORT simInt simSetUIButtonArrayColor(simInt uiHandle,simInt buttonHandle,const simInt* position,const simFloat* color);
SIM_DLLEXPORT simInt simRegisterContactCallback(simInt(*callBack)(simInt,simInt,simInt,simInt*,simFloat*));
SIM_DLLEXPORT simInt simRegisterJointCtrlCallback(simInt(*callBack)(simInt,simInt,simInt,const simInt*,const simFloat*,simFloat*));
SIM_DLLEXPORT simInt simSetJointForce(simInt objectHandle,simFloat forceOrTorque);
SIM_DLLEXPORT simInt simHandleMill(simInt millHandle,simFloat* removedSurfaceAndVolume);
SIM_DLLEXPORT simInt simSetShapeMassAndInertia(simInt shapeHandle,simFloat mass,const simFloat* inertiaMatrix,const simFloat* centerOfMass,const simFloat* transformation);
SIM_DLLEXPORT simInt simGetShapeMassAndInertia(simInt shapeHandle,simFloat* mass,simFloat* inertiaMatrix,simFloat* centerOfMass,const simFloat* transformation);
SIM_DLLEXPORT simInt simCheckIkGroup(simInt ikGroupHandle,simInt jointCnt,const simInt* jointHandles,simFloat* jointValues,const simInt* jointOptions);
SIM_DLLEXPORT simInt simCreateIkGroup(simInt options,const simInt* intParams,const simFloat* floatParams,const simVoid* reserved);
SIM_DLLEXPORT simInt simCreateIkElement(simInt ikGroupHandle,simInt options,const simInt* intParams,const simFloat* floatParams,const simVoid* reserved);
SIM_DLLEXPORT simInt simGetConfigForTipPose(simInt ikGroupHandle,simInt jointCnt,const simInt* jointHandles,simFloat thresholdDist,simInt maxTimeInMs,simFloat* retConfig,const simFloat* metric,simInt collisionPairCnt,const simInt* collisionPairs,const simInt* jointOptions,const simFloat* lowLimits,const simFloat* ranges,simVoid* reserved);
SIM_DLLEXPORT simFloat* simGenerateIkPath(simInt ikGroupHandle,simInt jointCnt,const simInt* jointHandles,simInt ptCnt,simInt collisionPairCnt,const simInt* collisionPairs,const simInt* jointOptions,simVoid* reserved);
SIM_DLLEXPORT simFloat* simGetIkGroupMatrix(simInt ikGroupHandle,simInt options,simInt* matrixSize);
SIM_DLLEXPORT simInt simSetIkGroupProperties(simInt ikGroupHandle,simInt resolutionMethod,simInt maxIterations,simFloat damping,void* reserved);
SIM_DLLEXPORT simInt simSetIkElementProperties(simInt ikGroupHandle,simInt tipDummyHandle,simInt constraints,const simFloat* precision,const simFloat* weight,void* reserved);
SIM_DLLEXPORT simInt simSetVisionSensorFilter(simInt visionSensorHandle,simInt filterIndex,simInt options,const simInt* pSizes,const simUChar* bytes,const simInt* ints,const simFloat* floats,const simUChar* custom);
SIM_DLLEXPORT simInt simGetVisionSensorFilter(simInt visionSensorHandle,simInt filterIndex,simInt* options,simInt* pSizes,simUChar** bytes,simInt** ints,simFloat** floats,simUChar** custom);
SIM_DLLEXPORT simInt simGetPositionOnPath(simInt pathHandle,simFloat relativeDistance,simFloat* position);
SIM_DLLEXPORT simInt simGetDataOnPath(simInt pathHandle,simFloat relativeDistance,simInt dataType,simInt* intData,simFloat* floatData);
SIM_DLLEXPORT simInt simGetOrientationOnPath(simInt pathHandle,simFloat relativeDistance,simFloat* eulerAngles);
SIM_DLLEXPORT simInt simGetClosestPositionOnPath(simInt pathHandle,simFloat* absolutePosition,simFloat* pathPosition);
SIM_DLLEXPORT simInt simGetPathPosition(simInt objectHandle,simFloat* position);
SIM_DLLEXPORT simInt simSetPathPosition(simInt objectHandle,simFloat position);
SIM_DLLEXPORT simInt simGetPathLength(simInt objectHandle,simFloat* length);
SIM_DLLEXPORT simInt simCreatePath(simInt attributes,const simInt* intParams,const simFloat* floatParams,const simFloat* color);
SIM_DLLEXPORT simInt simSetPathTargetNominalVelocity(simInt objectHandle,simFloat targetNominalVelocity);
SIM_DLLEXPORT simInt simSendData(simInt targetID,simInt dataHeader,const simChar* dataName,const simChar* data,simInt dataLength,simInt antennaHandle,simFloat actionRadius,simFloat emissionAngle1,simFloat emissionAngle2,simFloat persistence);
SIM_DLLEXPORT simInt simHandleDistance(simInt distanceObjectHandle,simFloat* smallestDistance);
SIM_DLLEXPORT simInt simReadDistance(simInt distanceObjectHandle,simFloat* smallestDistance);
SIM_DLLEXPORT simInt simAddBanner(const simChar* label,simFloat size,simInt options,const simFloat* positionAndEulerAngles,simInt parentObjectHandle,const simFloat* labelColors,const simFloat* backgroundColors);
SIM_DLLEXPORT simInt simAddGhost(simInt ghostGroup,simInt objectHandle,simInt options,simFloat startTime,simFloat endTime,const simFloat* color);
SIM_DLLEXPORT simInt simModifyGhost(simInt ghostGroup,simInt ghostId,simInt operation,simFloat floatValue,simInt options,simInt optionsMask,const simFloat* colorOrTransformation);
SIM_DLLEXPORT simInt simSetGraphUserData(simInt graphHandle,const simChar* streamName,simFloat data);
SIM_DLLEXPORT simInt simAddPointCloud(simInt pageMask,simInt layerMask,simInt objectHandle,simInt options,simFloat pointSize,simInt ptCnt,const simFloat* pointCoordinates,const simChar* defaultColors,const simChar* pointColors,const simFloat* pointNormals);
SIM_DLLEXPORT simInt simModifyPointCloud(simInt pointCloudHandle,simInt operation,const simInt* intParam,const simFloat* floatParam);
SIM_DLLEXPORT simInt simCopyMatrix(const simFloat* matrixIn,simFloat* matrixOut);
SIM_DLLEXPORT simInt simGetObjectFloatParameter(simInt objectHandle,simInt ParamID,simFloat* Param);
SIM_DLLEXPORT simInt simSetObjectFloatParameter(simInt objectHandle,simInt ParamID,simFloat Param);
SIM_DLLEXPORT simInt simSetFloatingParameter(simInt parameter,simFloat floatState);
SIM_DLLEXPORT simInt simGetFloatingParameter(simInt parameter,simFloat* floatState);
SIM_DLLEXPORT simInt simSetFloatParameter(simInt parameter,simFloat floatState);
SIM_DLLEXPORT simInt simGetFloatParameter(simInt parameter,simFloat* floatState);
SIM_DLLEXPORT simFloat simGetEngineFloatParameter(simInt paramId,simInt objectHandle,const simVoid* object,simBool* ok);
SIM_DLLEXPORT simInt simSetEngineFloatParameter(simInt paramId,simInt objectHandle,const simVoid* object,simFloat val);
SIM_DLLEXPORT simInt simSetObjectSizeValues(simInt objectHandle,const simFloat* sizeValues);
SIM_DLLEXPORT simInt simGetObjectSizeValues(simInt objectHandle,simFloat* sizeValues);
SIM_DLLEXPORT simInt simDisplayDialog(const simChar* titleText,const simChar* mainText,simInt dialogType,const simChar* initialText,const simFloat* titleColors,const simFloat* dialogColors,simInt* elementHandle);
SIM_DLLEXPORT simInt simScaleSelectedObjects(simFloat scalingFactor,simBool scalePositionsToo);
SIM_DLLEXPORT simInt simGetJointMatrix(simInt objectHandle,simFloat* matrix);
SIM_DLLEXPORT simInt simSetSphericalJointMatrix(simInt objectHandle,const simFloat* matrix);
SIM_DLLEXPORT simInt simSetScriptAttribute(simInt scriptHandle,simInt attributeID,simFloat floatVal,simInt intOrBoolVal);
SIM_DLLEXPORT simInt simGetScriptAttribute(simInt scriptHandle,simInt attributeID,simFloat* floatVal,simInt* intOrBoolVal);
SIM_DLLEXPORT simInt simGetJointMaxForce(simInt jointHandle,simFloat* forceOrTorque);
SIM_DLLEXPORT simInt simSetJointMaxForce(simInt objectHandle,simFloat forceOrTorque);
SIM_DLLEXPORT simFloat* simGetVisionSensorImage(simInt visionSensorHandle);
SIM_DLLEXPORT simInt simSetVisionSensorImage(simInt visionSensorHandle,const simFloat* image);
SIM_DLLEXPORT int simSetVisionSensorDepthBuffer(simInt visionSensorHandle,const float* depthBuffer);
SIM_DLLEXPORT simInt simCreatePureShape(simInt primitiveType,simInt options,const simFloat* sizes,simFloat mass,const simInt* precision);
SIM_DLLEXPORT simInt simBuildMatrixQ(const simFloat* position,const simFloat* quaternion,simFloat* matrix);
SIM_DLLEXPORT simInt simGetQuaternionFromMatrix(const simFloat* matrix,simFloat* quaternion);
SIM_DLLEXPORT simInt simGetShapeVertex(simInt shapeHandle,simInt groupElementIndex,simInt vertexIndex,simFloat* relativePosition);
SIM_DLLEXPORT simInt simGetShapeTriangle(simInt shapeHandle,simInt groupElementIndex,simInt triangleIndex,simInt* vertexIndices,simFloat* triangleNormals);
SIM_DLLEXPORT simVoid _simGetJointOdeParameters(const simVoid* joint,simFloat* stopERP,simFloat* stopCFM,simFloat* bounce,simFloat* fudge,simFloat* normalCFM);
SIM_DLLEXPORT simVoid _simGetJointBulletParameters(const simVoid* joint,simFloat* stopERP,simFloat* stopCFM,simFloat* normalCFM);
SIM_DLLEXPORT simVoid _simGetOdeMaxContactFrictionCFMandERP(const simVoid* geomInfo,simInt* maxContacts,simFloat* friction,simFloat* cfm,simFloat* erp);
SIM_DLLEXPORT simBool _simGetBulletCollisionMargin(const simVoid* geomInfo,simFloat* margin,simInt* otherProp);
SIM_DLLEXPORT simFloat _simGetBulletRestitution(const simVoid* geomInfo);
SIM_DLLEXPORT simVoid _simGetVortexParameters(const simVoid* object,simInt version,simFloat* floatParams,simInt* intParams);
SIM_DLLEXPORT simVoid _simGetNewtonParameters(const simVoid* object,simInt* version,simFloat* floatParams,simInt* intParams);
SIM_DLLEXPORT simVoid _simGetDamping(const simVoid* geomInfo,simFloat* linDamping,simFloat* angDamping);
SIM_DLLEXPORT simFloat _simGetFriction(const simVoid* geomInfo);
SIM_DLLEXPORT simVoid _simSetDynamicJointLocalTransformationPart2(simVoid* joint,const simFloat* pos,const simFloat* quat);
SIM_DLLEXPORT simVoid _simSetDynamicForceSensorLocalTransformationPart2(simVoid* forceSensor,const simFloat* pos,const simFloat* quat);
SIM_DLLEXPORT simVoid _simGetDynamicForceSensorLocalTransformationPart2(const simVoid* forceSensor,simFloat* pos,simFloat* quat);
SIM_DLLEXPORT simVoid _simGetMotorPid(const simVoid* joint,simFloat* pParam,simFloat* iParam,simFloat* dParam);
SIM_DLLEXPORT simVoid _simGetPrincipalMomentOfInertia(const simVoid* geomInfo,simFloat* inertia);
SIM_DLLEXPORT simVoid _simGetLocalInertiaFrame(const simVoid* geomInfo,simFloat* pos,simFloat* quat);
