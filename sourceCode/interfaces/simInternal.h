#if !defined(simInternal_INCLUDED_)
#define simInternal_INCLUDED_

#include "simConst.h"
#include "simTypes.h"
#include <string>
#include <vector>

void setCurrentScriptInfo_cSide(int scriptHandle,int scriptNameIndex);
int getCurrentScriptNameIndex_cSide();
std::string getIndexAdjustedObjectName(const char* nm);


int simRunSimulator_internal(const char* applicationName,int options,void(*initCallBack)(),void(*loopCallBack)(),void(*deinitCallBack)(),int stopDelay,const char* sceneOrModelToLoad,bool launchSimThread);
void* simGetMainWindow_internal(int type);
char* simGetLastError_internal();
int simSetBoolParam_internal(int parameter,bool boolState);
int simGetBoolParam_internal(int parameter);
int simSetInt32Param_internal(int parameter,int intState);
int simGetInt32Param_internal(int parameter,int* intState);
int simGetUInt64Param_internal(int parameter,unsigned long long int* intState);
int simSetFloatParam_internal(int parameter,float floatState);
int simGetFloatParam_internal(int parameter,float* floatState);
int simSetStringParam_internal(int parameter,const char* str);
char* simGetStringParam_internal(int parameter);
int simSetArrayParam_internal(int parameter,const void* arrayOfValues);
int simGetArrayParam_internal(int parameter,void* arrayOfValues);
int simSetNamedStringParam_internal(const char* paramName,const char* stringParam,int paramLength);
char* simGetNamedStringParam_internal(const char* paramName,int* paramLength);
int simGetObject_internal(const char* objectAlias,int index,int proxy,int options);
long long int simGetObjectUid_internal(int objectHandle);
int simGetObjectFromUid_internal(long long int uid,int options);
int simGetScriptHandleEx_internal(int scriptType,int objectHandle,const char* scriptName);
int simRemoveObjects_internal(const int* objectHandles,int count);
int simRemoveModel_internal(int objectHandle);
char* simGetObjectAlias_internal(int objectHandle,int options);
int simSetObjectAlias_internal(int objectHandle,const char* objectAlias,int options);
int simGetObjectMatrix_internal(int objectHandle,int relativeToObjectHandle,float* matrix);
int simSetObjectMatrix_internal(int objectHandle,int relativeToObjectHandle,const float* matrix);
int simGetObjectPose_internal(int objectHandle,int relativeToObjectHandle,float* pose);
int simSetObjectPose_internal(int objectHandle,int relativeToObjectHandle,const float* pose);
int simGetObjectPosition_internal(int objectHandle,int relativeToObjectHandle,float* position);
int simSetObjectPosition_internal(int objectHandle,int relativeToObjectHandle,const float* position);
int simGetObjectOrientation_internal(int objectHandle,int relativeToObjectHandle,float* eulerAngles);
int simGetObjectQuaternion_internal(int objectHandle,int relativeToObjectHandle,float* quaternion);
int simSetObjectQuaternion_internal(int objectHandle,int relativeToObjectHandle,const float* quaternion);
int simSetObjectOrientation_internal(int objectHandle,int relativeToObjectHandle,const float* eulerAngles);
int simGetJointPosition_internal(int objectHandle,float* position);
int simSetJointPosition_internal(int objectHandle,float position);
int simSetJointTargetPosition_internal(int objectHandle,float targetPosition);
int simGetJointTargetPosition_internal(int objectHandle,float* targetPosition);
int simGetObjectChildPose_internal(int objectHandle,float* pose);
int simSetObjectChildPose_internal(int objectHandle,const float* pose);
int simGetJointInterval_internal(int objectHandle,bool* cyclic,float* interval);
int simSetJointInterval_internal(int objectHandle,bool cyclic,const float* interval);
int simGetObjectParent_internal(int objectHandle);
int simGetObjectChild_internal(int objectHandle,int index);
int simSetObjectParent_internal(int objectHandle,int parentObjectHandle,bool keepInPlace);
int simGetObjectType_internal(int objectHandle);
int simGetJointType_internal(int objectHandle);
int simBuildIdentityMatrix_internal(float* matrix);
int simBuildMatrix_internal(const float* position,const float* eulerAngles,float* matrix);
int simBuildPose_internal(const float* position,const float* eulerAngles,float* pose);
int simGetEulerAnglesFromMatrix_internal(const float* matrix,float* eulerAngles);
int simInvertMatrix_internal(float* matrix);
int simMultiplyMatrices_internal(const float* matrixIn1,const float* matrixIn2,float* matrixOut);
int simMultiplyPoses_internal(const float* poseIn1,const float* poseIn2,float* poseOut);
int simInvertPose_internal(float* pose);
int simInterpolatePoses_internal(const float* poseIn1,const float* poseIn2,float interpolFactor,float* poseOut);
int simPoseToMatrix_internal(const float* poseIn,float* matrixOut);
int simMatrixToPose_internal(const float* matrixIn,float* poseOut);
int simInterpolateMatrices_internal(const float* matrixIn1,const float* matrixIn2,float interpolFactor,float* matrixOut);
int simTransformVector_internal(const float* matrix,float* vect);
int simReservedCommand_internal(int v,int w);
float simGetSimulationTime_internal();
int simGetSimulationState_internal();
double simGetSystemTime_internal();
int simLoadScene_internal(const char* filename);
int simCloseScene_internal();
int simSaveScene_internal(const char* filename);
int simLoadModel_internal(const char* filename);
int simSaveModel_internal(int baseOfModelHandle,const char* filename);
char* simGetSimulatorMessage_internal(int* messageID,int* auxiliaryData,int* returnedDataSize);
int simDoesFileExist_internal(const char* filename);
int* simGetObjectSel_internal(int* cnt);
int simSetObjectSel_internal(const int* handles,int cnt);
int simHandleProximitySensor_internal(int sensorHandle,float* detectedPoint,int* detectedObjectHandle,float* normalVector);
int simReadProximitySensor_internal(int sensorHandle,float* detectedPoint,int* detectedObjectHandle,float* normalVector);
int simHandleDynamics_internal(float deltaTime);
int simAssociateScriptWithObject_internal(int scriptHandle,int associatedObjectHandle);
int simHandleMainScript_internal();
int simResetScript_internal(int scriptHandle);
int simAddScript_internal(int scriptProperty);
int simRemoveScript_internal(int scriptHandle);
int simRefreshDialogs_internal(int refreshDegree);
int simResetProximitySensor_internal(int sensorHandle);
int simCheckProximitySensor_internal(int sensorHandle,int entityHandle,float* detectedPoint);
int simCheckProximitySensorEx_internal(int sensorHandle,int entityHandle,int detectionMode,float detectionThreshold,float maxAngle,float* detectedPoint,int* detectedObjectHandle,float* normalVector);
int simCheckProximitySensorEx2_internal(int sensorHandle,float* vertexPointer,int itemType,int itemCount,int detectionMode,float detectionThreshold,float maxAngle,float* detectedPoint,float* normalVector);
char* simCreateBuffer_internal(int size);
int simReleaseBuffer_internal(const char* buffer);
int simCheckCollision_internal(int entity1Handle,int entity2Handle);
int simCheckCollisionEx_internal(int entity1Handle,int entity2Handle,float** intersectionSegments);
int simCheckDistance_internal(int entity1Handle,int entity2Handle,float threshold,float* distanceData);
int simSetSimulationTimeStep_internal(float timeStep);
float simGetSimulationTimeStep_internal();
int simGetRealTimeSimulation_internal();
int simIsRealTimeSimulationStepNeeded_internal();
int simAdjustRealTimeTimer_internal(int instanceIndex,float deltaTime);
int simGetSimulationPassesPerRenderingPass_internal();
int simAdvanceSimulationByOneStep_internal();
int simStartSimulation_internal();
int simStopSimulation_internal();
int simPauseSimulation_internal();
int simLoadModule_internal(const char* filenameAndPath,const char* pluginName);
int simUnloadModule_internal(int pluginhandle);
char* simGetModuleName_internal(int index,unsigned char* moduleVersion);
int simFloatingViewAdd_internal(float posX,float posY,float sizeX,float sizeY,int options);
int simFloatingViewRemove_internal(int floatingViewHandle);
int simAdjustView_internal(int viewHandleOrIndex,int associatedViewableObjectHandle,int options,const char* viewLabel);
int simSetLastError_internal(const char* funcName,const char* errorMessage);
int simHandleGraph_internal(int graphHandle,float simulationTime);
int simResetGraph_internal(int graphHandle);
int simAddGraphStream_internal(int graphHandle,const char* streamName,const char* unitStr,int options,const float* color,float cyclicRange);
int simDestroyGraphCurve_internal(int graphHandle,int curveId);
int simSetGraphStreamTransformation_internal(int graphHandle,int streamId,int trType,float mult,float off,int movingAvgPeriod);
int simDuplicateGraphCurveToStatic_internal(int graphHandle,int curveId,const char* curveName);
int simAddGraphCurve_internal(int graphHandle,const char* curveName,int dim,const int* streamIds,const float* defaultValues,const char* unitStr,int options,const float* color,int curveWidth);
int simSetGraphStreamValue_internal(int graphHandle,int streamId,float value);
int simSetNavigationMode_internal(int navigationMode);
int simGetNavigationMode_internal();
int simSetPage_internal(int index);
int simGetPage_internal();
int simRegisterScriptCallbackFunction_internal(const char* funcNameAtPluginName,const char* callTips,void(*callBack)(struct SScriptCallBack* cb));
int simRegisterScriptVariable_internal(const char* varNameAtPluginName,const char* varValue,int stackHandle);
int simRegisterScriptFuncHook_internal(int scriptHandle,const char* funcToHook,const char* userFunction,bool executeBefore,int options);
int simSetJointTargetVelocity_internal(int objectHandle,float targetVelocity);
int simGetJointTargetVelocity_internal(int objectHandle,float* targetVelocity);
int simCopyPasteObjects_internal(int* objectHandles,int objectCount,int options);
int simScaleObjects_internal(const int* objectHandles,int objectCount,float scalingFactor,bool scalePositionsToo);
int simAddDrawingObject_internal(int objectType,float size,float duplicateTolerance,int parentObjectHandle,int maxItemCount,const float* color,const float* setToNULL,const float* setToNULL2,const float* setToNULL3);
int simRemoveDrawingObject_internal(int objectHandle);
int simAddDrawingObjectItem_internal(int objectHandle,const float* itemData);
float simGetObjectSizeFactor_internal(int objectHandle);
int simAnnounceSceneContentChange_internal();
int simSetInt32Signal_internal(const char* signalName,int signalValue);
int simGetInt32Signal_internal(const char* signalName,int* signalValue);
int simClearInt32Signal_internal(const char* signalName);
int simSetFloatSignal_internal(const char* signalName,float signalValue);
int simGetFloatSignal_internal(const char* signalName,float* signalValue);
int simClearFloatSignal_internal(const char* signalName);
int simSetStringSignal_internal(const char* signalName,const char* signalValue,int stringLength);
char* simGetStringSignal_internal(const char* signalName,int* stringLength);
int simClearStringSignal_internal(const char* signalName);
char* simGetSignalName_internal(int signalIndex,int signalType);
int simSetObjectProperty_internal(int objectHandle,int prop);
int simGetObjectProperty_internal(int objectHandle);
int simSetObjectSpecialProperty_internal(int objectHandle,int prop);
int simGetObjectSpecialProperty_internal(int objectHandle);
int simReadForceSensor_internal(int objectHandle,float* forceVector,float* torqueVector);
int simSetLightParameters_internal(int objectHandle,int state,const float* setToNULL,const float* diffusePart,const float* specularPart);
int simGetLightParameters_internal(int objectHandle,float* setToNULL,float* diffusePart,float* specularPart);
int simGetVelocity_internal(int shapeHandle,float* linearVelocity,float* angularVelocity);
int simGetObjectVelocity_internal(int objectHandle,float* linearVelocity,float* angularVelocity);
int simGetJointVelocity_internal(int jointHandle,float* velocity);
int simAddForceAndTorque_internal(int shapeHandle,const float* force,const float* torque);
int simAddForce_internal(int shapeHandle,const float* position,const float* force);
int simSetExplicitHandling_internal(int objectHandle,int explicitFlags);
int simGetExplicitHandling_internal(int objectHandle);
int simGetLinkDummy_internal(int dummyHandle);
int simSetLinkDummy_internal(int dummyHandle,int linkedDummyHandle);
int simSetModelProperty_internal(int objectHandle,int modelProperty);
int simGetModelProperty_internal(int objectHandle);
int simSetObjectColor_internal(int objectHandle,int index,int colorComponent,const float* rgbData);
int simGetObjectColor_internal(int objectHandle,int index,int colorComponent,float* rgbData);
int simSetShapeColor_internal(int shapeHandle,const char* colorName,int colorComponent,const float* rgbData);
int simGetShapeColor_internal(int shapeHandle,const char* colorName,int colorComponent,float* rgbData);
int simResetDynamicObject_internal(int objectHandle);
int simSetJointMode_internal(int jointHandle,int jointMode,int options);
int simGetJointMode_internal(int jointHandle,int* options);
int simSerialOpen_internal(const char* portString,int baudRate,void* reserved1,void* reserved2);
int simSerialClose_internal(int portHandle);
int simSerialSend_internal(int portHandle,const char* data,int dataLength);
int simSerialRead_internal(int portHandle,char* buffer,int dataLengthToRead);
int simSerialCheck_internal(int portHandle);
int simGetContactInfo_internal(int dynamicPass,int objectHandle,int index,int* objectHandles,float* contactInfo);
int simAuxiliaryConsoleOpen_internal(const char* title,int maxLines,int mode,const int* position,const int* size,const float* textColor,const float* backgroundColor);
int simAuxiliaryConsoleClose_internal(int consoleHandle);
int simAuxiliaryConsoleShow_internal(int consoleHandle,bool showState);
int simAuxiliaryConsolePrint_internal(int consoleHandle,const char* text);
int simImportShape_internal(int fileformat,const char* pathAndFilename,int options,float identicalVerticeTolerance,float scalingFactor);
int simImportMesh_internal(int fileformat,const char* pathAndFilename,int options,float identicalVerticeTolerance,float scalingFactor,float*** vertices,int** verticesSizes,int*** indices,int** indicesSizes,float*** reserved,char*** names);
int simExportMesh_internal(int fileformat,const char* pathAndFilename,int options,float scalingFactor,int elementCount,const float** vertices,const int* verticesSizes,const int** indices,const int* indicesSizes,float** reserved,const char** names);
int simCreateMeshShape_internal(int options,float shadingAngle,const float* vertices,int verticesSize,const int* indices,int indicesSize,float* reserved);
int simCreatePrimitiveShape_internal(int primitiveType,const float* sizes,int options);
int simCreateHeightfieldShape_internal(int options,float shadingAngle,int xPointCount,int yPointCount,float xSize,const float* heights);
int simGetShapeMesh_internal(int shapeHandle,float** vertices,int* verticesSize,int** indices,int* indicesSize,float** normals);
int simCreateJoint_internal(int jointType,int jointMode,int options,const float* sizes,const float* reservedA,const float* reservedB);
int simGetObjectInt32Param_internal(int objectHandle,int parameterID,int* parameter);
int simSetObjectInt32Param_internal(int objectHandle,int parameterID,int parameter);
int simGetObjectFloatParam_internal(int objectHandle,int parameterID,float* parameter);
int simSetObjectFloatParam_internal(int objectHandle,int parameterID,float parameter);
float* simGetObjectFloatArrayParam_internal(int objectHandle,int parameterID,int* size);
int simSetObjectFloatArrayParam_internal(int objectHandle,int parameterID,const float* params,int size);
char* simGetObjectStringParam_internal(int objectHandle,int parameterID,int* parameterLength);
int simSetObjectStringParam_internal(int objectHandle,int parameterID,const char* parameter,int parameterLength);
int simGetScriptInt32Param_internal(int scriptHandle,int parameterID,int* parameter);
int simSetScriptInt32Param_internal(int scriptHandle,int parameterID,int parameter);
char* simGetScriptStringParam_internal(int scriptHandle,int parameterID,int* parameterLength);
int simSetScriptStringParam_internal(int scriptHandle,int parameterID,const char* parameter,int parameterLength);
int simSetSimulationPassesPerRenderingPass_internal(int p);
int simGetRotationAxis_internal(const float* matrixStart,const float* matrixGoal,float* axis,float* angle);
int simRotateAroundAxis_internal(const float* matrixIn,const float* axis,const float* axisPos,float angle,float* matrixOut);
int simGetJointForce_internal(int jointHandle,float* forceOrTorque);
int simGetJointTargetForce_internal(int jointHandle,float* forceOrTorque);
int simSetJointTargetForce_internal(int objectHandle,float forceOrTorque,bool signedValue);
int simCameraFitToView_internal(int viewHandleOrIndex,int objectCount,const int* objectHandles,int options,float scaling);
int simPersistentDataWrite_internal(const char* dataTag,const char* dataValue,int dataLength,int options);
char* simPersistentDataRead_internal(const char* dataTag,int* dataLength);
int simIsHandle_internal(int generalObjectHandle,int generalObjectType);
int simHandleVisionSensor_internal(int visionSensorHandle,float** auxValues,int** auxValuesCount);
int simReadVisionSensor_internal(int visionSensorHandle,float** auxValues,int** auxValuesCount);
int simResetVisionSensor_internal(int visionSensorHandle);
int simCheckVisionSensor_internal(int visionSensorHandle,int entityHandle,float** auxValues,int** auxValuesCount);
floatDouble* simCheckVisionSensorEx_internal(int visionSensorHandle,int entityHandle,bool returnImage);
unsigned char* simGetVisionSensorImg_internal(int sensorHandle,int options,float rgbaCutOff,const int* pos,const int* size,int* resolution);
int simSetVisionSensorImg_internal(int sensorHandle,const unsigned char* img,int options,const int* pos,const int* size);
floatDouble* simGetVisionSensorDepth_internal(int sensorHandle,int options,const int* pos,const int* size,int* resolution);
int simRuckigPos_internal(int dofs,double baseCycleTime,int flags,const double* currentPos,const double* currentVel,const double* currentAccel,const double* maxVel,const double* maxAccel,const double* maxJerk,const bool* selection,const double* targetPos,const double* targetVel,double* reserved1,int* reserved2);
int simRuckigVel_internal(int dofs,double baseCycleTime,int flags,const double* currentPos,const double* currentVel,const double* currentAccel,const double* maxAccel,const double* maxJerk,const bool* selection,const double* targetVel,double* reserved1,int* reserved2);
int simRuckigStep_internal(int objHandle,double cycleTime,double* newPos,double* newVel,double* newAccel,double* syncTime,double* reserved1,int* reserved2);
int simRuckigRemove_internal(int objHandle);
int simCreateDummy_internal(float size,const float* reserved);
int simGroupShapes_internal(const int* shapeHandles,int shapeCount);
int* simUngroupShape_internal(int shapeHandle,int* shapeCount);
int simCreateProximitySensor_internal(int sensorType,int subType,int options,const int* intParams,const float* floatParams,const float* reserved);
int simCreateForceSensor_internal(int options,const int* intParams,const float* floatParams,const float* reserved);
int simCreateVisionSensor_internal(int options,const int* intParams,const float* floatParams,const float* reserved);
int simConvexDecompose_internal(int shapeHandle,int options,const int* intParams,const float* floatParams);
void simQuitSimulator_internal(bool ignoredArgument);
int simSetShapeMaterial_internal(int shapeHandle,int materialIdOrShapeHandle);
int simGetTextureId_internal(const char* textureName,int* resolution);
char* simReadTexture_internal(int textureId,int options,int posX,int posY,int sizeX,int sizeY);
int simWriteTexture_internal(int textureId,int options,const char* data,int posX,int posY,int sizeX,int sizeY,float interpol);
int simCreateTexture_internal(const char* fileName,int options,const float* planeSizes,const float* scalingUV,const float* xy_g,int fixedResolution,int* textureId,int* resolution,const void* reserved);
int simWriteCustomDataBlock_internal(int objectHandle,const char* tagName,const char* data,int dataSize);
char* simReadCustomDataBlock_internal(int objectHandle,const char* tagName,int* dataSize);
char* simReadCustomDataBlockTags_internal(int objectHandle,int* tagCount);
int simGetShapeGeomInfo_internal(int shapeHandle,int* intData,float* floatData,void* reserved);
int simGetObjects_internal(int index,int objectType);
int* simGetObjectsInTree_internal(int treeBaseHandle,int objectType,int options,int* objectCount);
int simSetObjectSizeValues_internal(int objectHandle,const float* sizeValues);
int simGetObjectSizeValues_internal(int objectHandle,float* sizeValues);
int simScaleObject_internal(int objectHandle,float xScale,float yScale,float zScale,int options);
int simSetShapeTexture_internal(int shapeHandle,int textureId,int mappingMode,int options,const float* uvScaling,const float* position,const float* orientation);
int simGetShapeTextureId_internal(int shapeHandle);
int simCreateCollectionEx_internal(int options);
int simAddItemToCollection_internal(int collectionHandle,int what,int objectHandle,int options);
int simDestroyCollection_internal(int collectionHandle);
int* simGetCollectionObjects_internal(int collectionHandle,int* objectCount);
int simReorientShapeBoundingBox_internal(int shapeHandle,int relativeToHandle,int reservedSetToZero);
int simSaveImage_internal(const unsigned char* image,const int* resolution,int options,const char* filename,int quality,void* reserved);
unsigned char* simLoadImage_internal(int* resolution,int options,const char* filename,void* reserved);
unsigned char* simGetScaledImage_internal(const unsigned char* imageIn,const int* resolutionIn,int* resolutionOut,int options,void* reserved);
int simTransformImage_internal(unsigned char* image,const int* resolution,int options,const floatDouble* floatParams,const int* intParams,void* reserved);
int simGetQHull_internal(const float* inVertices,int inVerticesL,float** verticesOut,int* verticesOutL,int** indicesOut,int* indicesOutL,int reserved1,const float* reserved2);
int simGetDecimatedMesh_internal(const float* inVertices,int inVerticesL,const int* inIndices,int inIndicesL,float** verticesOut,int* verticesOutL,int** indicesOut,int* indicesOutL,float decimationPercent,int reserved1,const float* reserved2);
int simCallScriptFunctionEx_internal(int scriptHandleOrType,const char* functionNameAtScriptName,int stackId);
char* simGetExtensionString_internal(int objectHandle,int index,const char* key);
int simComputeMassAndInertia_internal(int shapeHandle,float density);
int simCreateStack_internal();
int simReleaseStack_internal(int stackHandle);
int simCopyStack_internal(int stackHandle);
int simPushNullOntoStack_internal(int stackHandle);
int simPushBoolOntoStack_internal(int stackHandle,bool value);
int simPushInt32OntoStack_internal(int stackHandle,int value);
int simPushInt64OntoStack_internal(int stackHandle,long long int value);
int simPushFloatOntoStack_internal(int stackHandle,floatFloat value);
int simPushDoubleOntoStack_internal(int stackHandle,double value);
int simPushStringOntoStack_internal(int stackHandle,const char* value,int stringSize);
int simPushUInt8TableOntoStack_internal(int stackHandle,const unsigned char* values,int valueCnt);
int simPushInt32TableOntoStack_internal(int stackHandle,const int* values,int valueCnt);
int simPushInt64TableOntoStack_internal(int stackHandle,const long long int* values,int valueCnt);
int simPushFloatTableOntoStack_internal(int stackHandle,const floatFloat* values,int valueCnt);
int simPushDoubleTableOntoStack_internal(int stackHandle,const double* values,int valueCnt);
int simPushTableOntoStack_internal(int stackHandle);
int simInsertDataIntoStackTable_internal(int stackHandle);
int simGetStackSize_internal(int stackHandle);
int simPopStackItem_internal(int stackHandle,int count);
int simMoveStackItemToTop_internal(int stackHandle,int cIndex);
int simIsStackValueNull_internal(int stackHandle);
int simGetStackBoolValue_internal(int stackHandle,bool* boolValue);
int simGetStackInt32Value_internal(int stackHandle,int* numberValue);
int simGetStackInt64Value_internal(int stackHandle,long long int* numberValue);
int simGetStackFloatValue_internal(int stackHandle,floatFloat* numberValue);
int simGetStackDoubleValue_internal(int stackHandle,double* numberValue);
char* simGetStackStringValue_internal(int stackHandle,int* stringSize);
int simGetStackTableInfo_internal(int stackHandle,int infoType);
int simGetStackUInt8Table_internal(int stackHandle,unsigned char* array,int count);
int simGetStackInt32Table_internal(int stackHandle,int* array,int count);
int simGetStackInt64Table_internal(int stackHandle,long long int* array,int count);
int simGetStackFloatTable_internal(int stackHandle,floatFloat* array,int count);
int simGetStackDoubleTable_internal(int stackHandle,double* array,int count);
int simUnfoldStackTable_internal(int stackHandle);
int simDebugStack_internal(int stackHandle,int cIndex);
float simGetEngineFloatParam_internal(int paramId,int objectHandle,const void* object,bool* ok);
int simGetEngineInt32Param_internal(int paramId,int objectHandle,const void* object,bool* ok);
bool simGetEngineBoolParam_internal(int paramId,int objectHandle,const void* object,bool* ok);
int simSetEngineFloatParam_internal(int paramId,int objectHandle,const void* object,float val);
int simSetEngineInt32Param_internal(int paramId,int objectHandle,const void* object,int val);
int simSetEngineBoolParam_internal(int paramId,int objectHandle,const void* object,bool val);
int simCreateOctree_internal(float voxelSize,int options,float pointSize,void* reserved);
int simCreatePointCloud_internal(float maxVoxelSize,int maxPtCntPerVoxel,int options,float pointSize,void* reserved);
int simSetPointCloudOptions_internal(int pointCloudHandle,float maxVoxelSize,int maxPtCntPerVoxel,int options,float pointSize,void* reserved);
int simGetPointCloudOptions_internal(int pointCloudHandle,float* maxVoxelSize,int* maxPtCntPerVoxel,int* options,float* pointSize,void* reserved);
int simInsertVoxelsIntoOctree_internal(int octreeHandle,int options,const float* pts,int ptCnt,const unsigned char* color,const unsigned int* tag,void* reserved);
int simRemoveVoxelsFromOctree_internal(int octreeHandle,int options,const float* pts,int ptCnt,void* reserved);
int simInsertPointsIntoPointCloud_internal(int pointCloudHandle,int options,const float* pts,int ptCnt,const unsigned char* color,void* optionalValues);
int simRemovePointsFromPointCloud_internal(int pointCloudHandle,int options,const float* pts,int ptCnt,float tolerance,void* reserved);
int simIntersectPointsWithPointCloud_internal(int pointCloudHandle,int options,const float* pts,int ptCnt,float tolerance,void* reserved);
const float* simGetOctreeVoxels_internal(int octreeHandle,int* ptCnt,void* reserved);
const float* simGetPointCloudPoints_internal(int pointCloudHandle,int* ptCnt,void* reserved);
int simInsertObjectIntoOctree_internal(int octreeHandle,int objectHandle,int options,const unsigned char* color,unsigned int tag,void* reserved);
int simSubtractObjectFromOctree_internal(int octreeHandle,int objectHandle,int options,void* reserved);
int simInsertObjectIntoPointCloud_internal(int pointCloudHandle,int objectHandle,int options,float gridSize,const unsigned char* color,void* optionalValues);
int simSubtractObjectFromPointCloud_internal(int pointCloudHandle,int objectHandle,int options,float tolerance,void* reserved);
int simCheckOctreePointOccupancy_internal(int octreeHandle,int options,const float* points,int ptCnt,unsigned int* tag,unsigned long long int* location,void* reserved);
char* simOpenTextEditor_internal(const char* initText,const char* xml,int* various);
char* simPackTable_internal(int stackHandle,int* bufferSize);
int simUnpackTable_internal(int stackHandle,const char* buffer,int bufferSize);
int simSetReferencedHandles_internal(int objectHandle,int count,const int* referencedHandles,const int* reserved1,const int* reserved2);
int simGetReferencedHandles_internal(int objectHandle,int** referencedHandles,int** reserved1,int** reserved2);
int simGetShapeViz_internal(int shapeHandle,int index,struct SShapeVizInfo* info);
int simExecuteScriptString_internal(int scriptHandleOrType,const char* stringAtScriptName,int stackHandle);
char* simGetApiFunc_internal(int scriptHandleOrType,const char* apiWord);
char* simGetApiInfo_internal(int scriptHandleOrType,const char* apiWord);
int simSetModuleInfo_internal(const char* moduleName,int infoType,const char* stringInfo,int intInfo);
int simGetModuleInfo_internal(const char* moduleName,int infoType,char** stringInfo,int* intInfo);
int simIsDeprecated_internal(const char* funcOrConst);
char* simGetPersistentDataTags_internal(int* tagCount);
int simEventNotification_internal(const char* event);
int simApplyTexture_internal(int shapeHandle,const float* textureCoordinates,int textCoordSize,const unsigned char* texture,const int* textureResolution,int options);
int simSetJointDependency_internal(int jointHandle,int masterJointHandle,float offset,float multCoeff);
int simGetJointDependency_internal(int jointHandle,int* masterJointHandle,float* offset,float* multCoeff);
int simAddLog_internal(const char* pluginName,int verbosityLevel,const char* logMsg);
int simGetShapeMass_internal(int shapeHandle,float* mass);
int simSetShapeMass_internal(int shapeHandle,float mass);
int simGetShapeInertia_internal(int shapeHandle,float* inertiaMatrix,float* transformationMatrix);
int simSetShapeInertia_internal(int shapeHandle,const float* inertiaMatrix,const float* transformationMatrix);
int simIsDynamicallyEnabled_internal(int objectHandle);
int simGenerateShapeFromPath_internal(const float* path,int pathSize,const float* section,int sectionSize,int options,const float* upVector,float reserved);
float simGetClosestPosOnPath_internal(const float* path,int pathSize,const float* pathLengths,const float* absPt);
int simInitScript_internal(int scriptHandle);
int simModuleEntry_internal(int handle,const char* label,int state);
int simCheckExecAuthorization_internal(const char* what,const char* args,int scriptHandle);


void _simSetDynamicSimulationIconCode_internal(void* object,int code);
void _simSetDynamicObjectFlagForVisualization_internal(void* object,int flag);
int _simGetObjectListSize_internal(int objType);
const void* _simGetObjectFromIndex_internal(int objType,int index);
int _simGetObjectID_internal(const void* object);
int _simGetObjectType_internal(const void* object);
const void** _simGetObjectChildren_internal(const void* object,int* count);
const void* _simGetGeomProxyFromShape_internal(const void* shape);
const void* _simGetParentObject_internal(const void* object);
const void* _simGetObject_internal(int objID);
void _simGetObjectLocalTransformation_internal(const void* object,float* pos,float* quat,bool excludeFirstJointTransformation);
void _simSetObjectLocalTransformation_internal(void* object,const float* pos,const float* quat,float simTime);
void _simDynReportObjectCumulativeTransformation_internal(void* object,const float* pos,const float* quat,float simTime);
void _simSetObjectCumulativeTransformation_internal(void* object,const float* pos,const float* quat,bool keepChildrenInPlace);
void _simGetObjectCumulativeTransformation_internal(const void* object,float* pos,float* quat,bool excludeFirstJointTransformation);
bool _simIsShapeDynamicallyStatic_internal(const void* shape);
int _simGetTreeDynamicProperty_internal(const void* object);
int _simGetDummyLinkType_internal(const void* dummy,int* linkedDummyID);
int _simGetJointMode_internal(const void* joint);
bool _simIsJointInHybridOperation_internal(const void* joint);
void _simDisableDynamicTreeForManipulation_internal(const void* object,bool disableFlag);
bool _simIsShapeDynamicallyRespondable_internal(const void* shape);
int _simGetDynamicCollisionMask_internal(const void* shape);
const void* _simGetLastParentForLocalGlobalCollidable_internal(const void* shape);
void _simSetJointVelocity_internal(const void* joint,float vel);
void _simSetJointPosition_internal(const void* joint,float pos);
float _simGetJointPosition_internal(const void* joint);
void _simSetDynamicMotorPositionControlTargetPosition_internal(const void* joint,float pos);
void _simGetInitialDynamicVelocity_internal(const void* shape,float* vel);
void _simSetInitialDynamicVelocity_internal(void* shape,const float* vel);
void _simGetInitialDynamicAngVelocity_internal(const void* shape,float* angularVel);
void _simSetInitialDynamicAngVelocity_internal(void* shape,const float* angularVel);
bool _simGetStartSleeping_internal(const void* shape);
bool _simGetWasPutToSleepOnce_internal(const void* shape);
bool _simGetDynamicsFullRefreshFlag_internal(const void* object);
void _simSetDynamicsFullRefreshFlag_internal(const void* object,bool flag);
void _simSetShapeDynamicVelocity_internal(void* shape,const float* linear,const float* angular,float simTime);
void _simGetAdditionalForceAndTorque_internal(const void* shape,float* force,float* torque);
void _simClearAdditionalForceAndTorque_internal(const void* shape);
bool _simGetJointPositionInterval_internal(const void* joint,float* minValue,float* rangeValue);
int _simGetJointType_internal(const void* joint);
float _simGetDynamicMotorTargetPosition_internal(const void* joint);
float _simGetDynamicMotorTargetVelocity_internal(const void* joint);
float _simGetDynamicMotorMaxForce_internal(const void* joint);
float _simGetDynamicMotorUpperLimitVelocity_internal(const void* joint);
void _simSetDynamicMotorReflectedPositionFromDynamicEngine_internal(void* joint,float pos,float simTime);
void _simSetJointSphericalTransformation_internal(void* joint,const float* quat,float simTime);
void _simAddForceSensorCumulativeForcesAndTorques_internal(void* forceSensor,const float* force,const float* torque,int totalPassesCount,float simTime);
void _simAddJointCumulativeForcesOrTorques_internal(void* joint,float forceOrTorque,int totalPassesCount,float simTime);
const void* _simGetGeomWrapFromGeomProxy_internal(const void* geomData);
float _simGetMass_internal(const void* geomInfo);
float _simGetLocalInertiaInfo_internal(const void* object,float* pos,float* quat,float* diagI);
int _simGetPurePrimitiveType_internal(const void* geomInfo);
bool _simIsGeomWrapGeometric_internal(const void* geomInfo);
bool _simIsGeomWrapConvex_internal(const void* geomInfo);
int _simGetGeometricCount_internal(const void* geomInfo);
void _simGetAllGeometrics_internal(const void* geomInfo,void** allGeometrics);
void _simGetPurePrimitiveSizes_internal(const void* geometric,float* sizes);
void _simMakeDynamicAnnouncement_internal(int announceType);
void _simGetVerticesLocalFrame_internal(const void* geometric,float* pos,float* quat);
const float* _simGetHeightfieldData_internal(const void* geometric,int* xCount,int* yCount,float* minHeight,float* maxHeight);
void _simGetCumulativeMeshes_internal(const void* geomInfo,float** vertices,int* verticesSize,int** indices,int* indicesSize);
void _simGetGravity_internal(float* gravity);
int _simGetTimeDiffInMs_internal(int previousTime);
bool _simDoEntitiesCollide_internal(int entity1ID,int entity2ID,int* cacheBuffer,bool overrideCollidableFlagIfShape1,bool overrideCollidableFlagIfShape2,bool pathOrMotionPlanningRoutineCalling);
bool _simGetDistanceBetweenEntitiesIfSmaller_internal(int entity1ID,int entity2ID,float* distance,float* ray,int* cacheBuffer,bool overrideMeasurableFlagIfNonCollection1,bool overrideMeasurableFlagIfNonCollection2,bool pathPlanningRoutineCalling);
int _simHandleJointControl_internal(const void* joint,int auxV,const int* inputValuesInt,const float* inputValuesFloat,float* outputValues);
int _simGetJointDynCtrlMode_internal(const void* joint);
int _simHandleCustomContact_internal(int objHandle1,int objHandle2,int engine,int* dataInt,float* dataFloat);
const void* _simGetIkGroupObject_internal(int ikGroupID);
int _simMpHandleIkGroupObject_internal(const void* ikGroup);
float _simGetPureHollowScaling_internal(const void* geometric);
void _simDynCallback_internal(const int* intData,const float* floatData);


// Following courtesy of Stephen James:
int simExtLaunchUIThread_internal(const char* applicationName,int options,const char* sceneOrModelToLoad_,const char* applicationDir_);
int simExtCanInitSimThread_internal();
int simExtSimThreadInit_internal();
int simExtSimThreadDestroy_internal();
int simExtPostExitRequest_internal();
int simExtGetExitRequest_internal();
int simExtStep_internal(bool stepIfRunning);
int simExtCallScriptFunction_internal(int scriptHandleOrType, const char* functionNameAtScriptName,
                                         const int* inIntData, int inIntCnt,
                                         const float* inFloatData, int inFloatCnt,
                                         const char** inStringData, int inStringCnt,
                                         const char* inBufferData, int inBufferCnt,
                                         int** outIntData, int* outIntCnt,
                                         float** outFloatData, int* outFloatCnt,
                                         char*** outStringData, int* outStringCnt,
                                         char** outBufferData, int* outBufferSize);

#include "simInternal-old.h"

#endif // !defined(simInternal_INCLUDED_)
