#if !defined(sim_INCLUDED_)
#define sim_INCLUDED_

#include "simConst.h"
#include "simTypes.h"

#ifndef SIM_DLLEXPORT
    #ifdef WIN_SIM
        #define SIM_DLLEXPORT extern "C" __declspec(dllexport)
    #endif
    #ifdef MAC_SIM
        #define SIM_DLLEXPORT extern "C" __attribute__((visibility("default")))
    #endif
    #ifdef LIN_SIM
        #define SIM_DLLEXPORT extern "C" __attribute__((visibility("default")))
    #endif
#endif

SIM_DLLEXPORT simInt simRunSimulator(const simChar* applicationName,simInt options,simVoid(*initCallBack)(),simVoid(*loopCallBack)(),simVoid(*deinitCallBack)());
SIM_DLLEXPORT simInt simRunSimulatorEx(const simChar* applicationName,simInt options,simVoid(*initCallBack)(),simVoid(*loopCallBack)(),simVoid(*deinitCallBack)(),simInt stopDelay,const simChar* sceneOrModelToLoad);
SIM_DLLEXPORT simVoid* simGetMainWindow(simInt type);
SIM_DLLEXPORT simChar* simGetLastError();
SIM_DLLEXPORT simInt simSetBoolParam(simInt parameter,simBool boolState);
SIM_DLLEXPORT simInt simGetBoolParam(simInt parameter);
SIM_DLLEXPORT simInt simSetInt32Param(simInt parameter,simInt intState);
SIM_DLLEXPORT simInt simGetInt32Param(simInt parameter,simInt* intState);
SIM_DLLEXPORT simInt simGetUInt64Param(simInt parameter,simUInt64* intState);
SIM_DLLEXPORT simInt simSetStringParam(simInt parameter,const simChar* str);
SIM_DLLEXPORT simChar* simGetStringParam(simInt parameter);
SIM_DLLEXPORT simInt simSetArrayParam(simInt parameter,const simVoid* arrayOfValues);
SIM_DLLEXPORT simInt simGetArrayParam(simInt parameter,simVoid* arrayOfValues);
SIM_DLLEXPORT simInt simSetNamedStringParam(const simChar* paramName,const simChar* stringParam,simInt paramLength);
SIM_DLLEXPORT simChar* simGetNamedStringParam(const simChar* paramName,simInt* paramLength);
SIM_DLLEXPORT simInt simGetObject(const simChar* objectAlias,simInt index,simInt proxy,simInt options);
SIM_DLLEXPORT simInt64 simGetObjectUid(simInt objectHandle);
SIM_DLLEXPORT simInt simGetObjectFromUid(simInt64 uid,simInt options);
SIM_DLLEXPORT simInt simGetScriptHandleEx(simInt scriptType,simInt objectHandle,const simChar* scriptName);
SIM_DLLEXPORT simInt simRemoveObjects(const simInt* objectHandles,simInt count);
SIM_DLLEXPORT simInt simRemoveModel(simInt objectHandle);
SIM_DLLEXPORT simChar* simGetObjectAlias(simInt objectHandle,simInt options);
SIM_DLLEXPORT simInt simSetObjectAlias(simInt objectHandle,const simChar* objectAlias,simInt options);
SIM_DLLEXPORT simInt simGetObjectParent(simInt objectHandle);
SIM_DLLEXPORT simInt simGetObjectChild(simInt objectHandle,simInt index);
SIM_DLLEXPORT simInt simSetObjectParent(simInt objectHandle,simInt parentObjectHandle,simBool keepInPlace);
SIM_DLLEXPORT simInt simGetObjectType(simInt objectHandle);
SIM_DLLEXPORT simInt simGetJointType(simInt objectHandle);
SIM_DLLEXPORT simInt simReservedCommand(simInt v,simInt w);
SIM_DLLEXPORT simInt simGetSimulationState();
SIM_DLLEXPORT simInt simLoadScene(const simChar* filename);
SIM_DLLEXPORT simInt simCloseScene();
SIM_DLLEXPORT simInt simSaveScene(const simChar* filename);
SIM_DLLEXPORT simInt simLoadModel(const simChar* filename);
SIM_DLLEXPORT simInt simSaveModel(simInt baseOfModelHandle,const simChar* filename);
SIM_DLLEXPORT simChar* simGetSimulatorMessage(simInt* messageID,simInt* auxiliaryData,simInt* returnedDataSize);
SIM_DLLEXPORT simInt simDoesFileExist(const simChar* filename);
SIM_DLLEXPORT simInt* simGetObjectSel(simInt* cnt);
SIM_DLLEXPORT simInt simSetObjectSel(const simInt* handles,simInt cnt);
SIM_DLLEXPORT simInt simAssociateScriptWithObject(simInt scriptHandle,simInt associatedObjectHandle);
SIM_DLLEXPORT simInt simHandleMainScript();
SIM_DLLEXPORT simInt simResetScript(simInt scriptHandle);
SIM_DLLEXPORT simInt simAddScript(simInt scriptProperty);
SIM_DLLEXPORT simInt simRemoveScript(simInt scriptHandle);
SIM_DLLEXPORT simInt simRefreshDialogs(simInt refreshDegree);
SIM_DLLEXPORT simInt simResetProximitySensor(simInt sensorHandle);
SIM_DLLEXPORT simChar* simCreateBuffer(simInt size);
SIM_DLLEXPORT simInt simReleaseBuffer(const simChar* buffer);
SIM_DLLEXPORT simInt simCheckCollision(simInt entity1Handle,simInt entity2Handle);
SIM_DLLEXPORT simInt simGetRealTimeSimulation();
SIM_DLLEXPORT simInt simIsRealTimeSimulationStepNeeded();
SIM_DLLEXPORT simInt simGetSimulationPassesPerRenderingPass();
SIM_DLLEXPORT simInt simAdvanceSimulationByOneStep();
SIM_DLLEXPORT simInt simStartSimulation();
SIM_DLLEXPORT simInt simStopSimulation();
SIM_DLLEXPORT simInt simPauseSimulation();
SIM_DLLEXPORT simInt simLoadModule(const simChar* filenameAndPath,const simChar* pluginName);
SIM_DLLEXPORT simInt simUnloadModule(simInt pluginhandle);
SIM_DLLEXPORT simChar* simGetModuleName(simInt index,simUChar* moduleVersion);
SIM_DLLEXPORT simInt simAdjustView(simInt viewHandleOrIndex,simInt associatedViewableObjectHandle,simInt options,const simChar* viewLabel);
SIM_DLLEXPORT simInt simSetLastError(const simChar* funcName,const simChar* errorMessage);
SIM_DLLEXPORT simInt simResetGraph(simInt graphHandle);
SIM_DLLEXPORT simInt simDestroyGraphCurve(simInt graphHandle,simInt curveId);
SIM_DLLEXPORT simInt simDuplicateGraphCurveToStatic(simInt graphHandle,simInt curveId,const simChar* curveName);
SIM_DLLEXPORT simInt simSetNavigationMode(simInt navigationMode);
SIM_DLLEXPORT simInt simGetNavigationMode();
SIM_DLLEXPORT simInt simSetPage(simInt index);
SIM_DLLEXPORT simInt simGetPage();
SIM_DLLEXPORT simInt simRegisterScriptCallbackFunction(const simChar* funcNameAtPluginName,const simChar* callTips,simVoid(*callBack)(struct SScriptCallBack* cb));
SIM_DLLEXPORT simInt simRegisterScriptVariable(const simChar* varNameAtPluginName,const simChar* varValue,simInt stackHandle);
SIM_DLLEXPORT simInt simRegisterScriptFuncHook(simInt scriptHandle,const simChar* funcToHook,const simChar* userFunction,simBool executeBefore,simInt options);
SIM_DLLEXPORT simInt simCopyPasteObjects(simInt* objectHandles,simInt objectCount,simInt options);
SIM_DLLEXPORT simInt simRemoveDrawingObject(simInt objectHandle);
SIM_DLLEXPORT simInt simAnnounceSceneContentChange();
SIM_DLLEXPORT simInt simSetInt32Signal(const simChar* signalName,simInt signalValue);
SIM_DLLEXPORT simInt simGetInt32Signal(const simChar* signalName,simInt* signalValue);
SIM_DLLEXPORT simInt simClearInt32Signal(const simChar* signalName);
SIM_DLLEXPORT simInt simClearFloatSignal(const simChar* signalName);
SIM_DLLEXPORT simInt simSetStringSignal(const simChar* signalName,const simChar* signalValue,simInt stringLength);
SIM_DLLEXPORT simChar* simGetStringSignal(const simChar* signalName,simInt* stringLength);
SIM_DLLEXPORT simInt simClearStringSignal(const simChar* signalName);
SIM_DLLEXPORT simChar* simGetSignalName(simInt signalIndex,simInt signalType);
SIM_DLLEXPORT simInt simSetObjectProperty(simInt objectHandle,simInt prop);
SIM_DLLEXPORT simInt simGetObjectProperty(simInt objectHandle);
SIM_DLLEXPORT simInt simSetObjectSpecialProperty(simInt objectHandle,simInt prop);
SIM_DLLEXPORT simInt simGetObjectSpecialProperty(simInt objectHandle);
SIM_DLLEXPORT simInt simSetExplicitHandling(simInt objectHandle,int explicitFlags);
SIM_DLLEXPORT simInt simGetExplicitHandling(simInt objectHandle);
SIM_DLLEXPORT simInt simGetLinkDummy(simInt dummyHandle);
SIM_DLLEXPORT simInt simSetLinkDummy(simInt dummyHandle,simInt linkedDummyHandle);
SIM_DLLEXPORT simInt simSetModelProperty(simInt objectHandle,simInt modelProperty);
SIM_DLLEXPORT simInt simGetModelProperty(simInt objectHandle);
SIM_DLLEXPORT simInt simResetDynamicObject(simInt objectHandle);
SIM_DLLEXPORT simInt simSetJointMode(simInt jointHandle,simInt jointMode,simInt options);
SIM_DLLEXPORT simInt simGetJointMode(simInt jointHandle,simInt* options);
SIM_DLLEXPORT simInt simSerialOpen(const simChar* portString,simInt baudRate,simVoid* reserved1,simVoid* reserved2);
SIM_DLLEXPORT simInt simSerialClose(simInt portHandle);
SIM_DLLEXPORT simInt simSerialSend(simInt portHandle,const simChar* data,simInt dataLength);
SIM_DLLEXPORT simInt simSerialRead(simInt portHandle,simChar* buffer,simInt dataLengthToRead);
SIM_DLLEXPORT simInt simSerialCheck(simInt portHandle);
SIM_DLLEXPORT simInt simAuxiliaryConsoleClose(simInt consoleHandle);
SIM_DLLEXPORT simInt simAuxiliaryConsoleShow(simInt consoleHandle,simBool showState);
SIM_DLLEXPORT simInt simAuxiliaryConsolePrint(simInt consoleHandle,const simChar* text);
SIM_DLLEXPORT simInt simGetObjectInt32Param(simInt objectHandle,simInt ParamID,simInt* Param);
SIM_DLLEXPORT simInt simSetObjectInt32Param(simInt objectHandle,simInt ParamID,simInt Param);
SIM_DLLEXPORT simChar* simGetObjectStringParam(simInt objectHandle,simInt ParamID,simInt* ParamLength);
SIM_DLLEXPORT simInt simSetObjectStringParam(simInt objectHandle,simInt ParamID,const simChar* Param,simInt ParamLength);
SIM_DLLEXPORT simInt simGetScriptInt32Param(simInt ScriptHandle,simInt ParamID,simInt* Param);
SIM_DLLEXPORT simInt simSetScriptInt32Param(simInt ScriptHandle,simInt ParamID,simInt Param);
SIM_DLLEXPORT simChar* simGetScriptStringParam(simInt ScriptHandle,simInt ParamID,simInt* ParamLength);
SIM_DLLEXPORT simInt simSetScriptStringParam(simInt ScriptHandle,simInt ParamID,const simChar* Param,simInt ParamLength);
SIM_DLLEXPORT simInt simSetSimulationPassesPerRenderingPass(simInt p);
SIM_DLLEXPORT simInt simPersistentDataWrite(const simChar* dataName,const simChar* dataValue,simInt dataLength,simInt options);
SIM_DLLEXPORT simChar* simPersistentDataRead(const simChar* dataName,simInt* dataLength);
SIM_DLLEXPORT simInt simIsHandle(simInt generalObjectHandle,simInt generalObjectType);
SIM_DLLEXPORT simInt simResetVisionSensor(simInt visionSensorHandle);
SIM_DLLEXPORT simInt simSetVisionSensorImg(simInt sensorHandle,const simUChar* img,simInt options,const simInt* pos,const simInt* size);
SIM_DLLEXPORT simInt simRuckigPos(simInt dofs,simDouble baseCycleTime,simInt flags,const simDouble* currentPos,const simDouble* currentVel,const simDouble* currentAccel,const simDouble* maxVel,const simDouble* maxAccel,const simDouble* maxJerk,const simBool* selection,const simDouble* targetPos,const simDouble* targetVel,simDouble* reserved1,simInt* reserved2);
SIM_DLLEXPORT simInt simRuckigVel(simInt dofs,simDouble baseCycleTime,simInt flags,const simDouble* currentPos,const simDouble* currentVel,const simDouble* currentAccel,const simDouble* maxAccel,const simDouble* maxJerk,const simBool* selection,const simDouble* targetVel,simDouble* reserved1,simInt* reserved2);
SIM_DLLEXPORT simInt simRuckigStep(simInt objHandle,simDouble cycleTime,simDouble* newPos,simDouble* newVel,simDouble* newAccel,simDouble* syncTime,simDouble* reserved1,simInt* reserved2);
SIM_DLLEXPORT simInt simRuckigRemove(simInt objHandle);
SIM_DLLEXPORT simInt simGroupShapes(const simInt* shapeHandles,simInt shapeCount);
SIM_DLLEXPORT simInt* simUngroupShape(simInt shapeHandle,simInt* shapeCount);
SIM_DLLEXPORT simVoid simQuitSimulator(simBool ignoredArgument);
SIM_DLLEXPORT simInt simSetShapeMaterial(simInt shapeHandle,simInt materialIdOrShapeHandle);
SIM_DLLEXPORT simInt simGetTextureId(const simChar* textureName,simInt* resolution);
SIM_DLLEXPORT simChar* simReadTexture(simInt textureId,simInt options,simInt posX,simInt posY,simInt sizeX,simInt sizeY);
SIM_DLLEXPORT simInt simWriteCustomDataBlock(simInt objectHandle,const simChar* tagName,const simChar* data,simInt dataSize);
SIM_DLLEXPORT simChar* simReadCustomDataBlock(simInt objectHandle,const simChar* tagName,simInt* dataSize);
SIM_DLLEXPORT simChar* simReadCustomDataBlockTags(simInt objectHandle,simInt* tagCount);
SIM_DLLEXPORT simInt simGetObjects(simInt index,simInt objectType);
SIM_DLLEXPORT simInt* simGetObjectsInTree(simInt treeBaseHandle,simInt objectType,simInt options,simInt* objectCount);
SIM_DLLEXPORT simInt simGetShapeTextureId(simInt shapeHandle);
SIM_DLLEXPORT simInt simCreateCollectionEx(simInt options);
SIM_DLLEXPORT simInt simAddItemToCollection(simInt collectionHandle,simInt what,simInt objectHandle,simInt options);
SIM_DLLEXPORT simInt simDestroyCollection(simInt collectionHandle);
SIM_DLLEXPORT simInt* simGetCollectionObjects(simInt collectionHandle,simInt* objectCount);
SIM_DLLEXPORT simInt simReorientShapeBoundingBox(simInt shapeHandle,simInt relativeToHandle,simInt reservedSetToZero);
SIM_DLLEXPORT simInt simSaveImage(const simUChar* image,const simInt* resolution,simInt options,const simChar* filename,simInt quality,simVoid* reserved);
SIM_DLLEXPORT simUChar* simLoadImage(simInt* resolution,simInt options,const simChar* filename,simVoid* reserved);
SIM_DLLEXPORT simUChar* simGetScaledImage(const simUChar* imageIn,const simInt* resolutionIn,simInt* resolutionOut,simInt options,simVoid* reserved);
SIM_DLLEXPORT simInt simCallScriptFunctionEx(simInt scriptHandleOrType,const simChar* functionNameAtScriptName,simInt stackId);
SIM_DLLEXPORT simChar* simGetExtensionString(simInt objectHandle,simInt index,const char* key);
SIM_DLLEXPORT simInt simCreateStack();
SIM_DLLEXPORT simInt simReleaseStack(simInt stackHandle);
SIM_DLLEXPORT simInt simCopyStack(simInt stackHandle);
SIM_DLLEXPORT simInt simPushNullOntoStack(simInt stackHandle);
SIM_DLLEXPORT simInt simPushBoolOntoStack(simInt stackHandle,simBool value);
SIM_DLLEXPORT simInt simPushInt32OntoStack(simInt stackHandle,simInt value);
SIM_DLLEXPORT simInt simPushInt64OntoStack(simInt stackHandle,simInt64 value);
SIM_DLLEXPORT simInt simPushFloatOntoStack(simInt stackHandle,simFloat value);
SIM_DLLEXPORT simInt simPushDoubleOntoStack(simInt stackHandle,simDouble value);
SIM_DLLEXPORT simInt simPushStringOntoStack(simInt stackHandle,const simChar* value,simInt stringSize);
SIM_DLLEXPORT simInt simPushUInt8TableOntoStack(simInt stackHandle,const simUChar* values,simInt valueCnt);
SIM_DLLEXPORT simInt simPushInt32TableOntoStack(simInt stackHandle,const simInt* values,simInt valueCnt);
SIM_DLLEXPORT simInt simPushInt64TableOntoStack(simInt stackHandle,const simInt64* values,simInt valueCnt);
SIM_DLLEXPORT simInt simPushFloatTableOntoStack(simInt stackHandle,const simFloat* values,simInt valueCnt);
SIM_DLLEXPORT simInt simPushDoubleTableOntoStack(simInt stackHandle,const simDouble* values,simInt valueCnt);
SIM_DLLEXPORT simInt simPushTableOntoStack(simInt stackHandle);
SIM_DLLEXPORT simInt simInsertDataIntoStackTable(simInt stackHandle);
SIM_DLLEXPORT simInt simGetStackSize(simInt stackHandle);
SIM_DLLEXPORT simInt simPopStackItem(simInt stackHandle,simInt count);
SIM_DLLEXPORT simInt simMoveStackItemToTop(simInt stackHandle,simInt cIndex);
SIM_DLLEXPORT simInt simIsStackValueNull(simInt stackHandle);
SIM_DLLEXPORT simInt simGetStackBoolValue(simInt stackHandle,simBool* boolValue);
SIM_DLLEXPORT simInt simGetStackInt32Value(simInt stackHandle,simInt* numberValue);
SIM_DLLEXPORT simInt simGetStackInt64Value(simInt stackHandle,simInt64* numberValue);
SIM_DLLEXPORT simInt simGetStackFloatValue(simInt stackHandle,simFloat* numberValue);
SIM_DLLEXPORT simInt simGetStackDoubleValue(simInt stackHandle,simDouble* numberValue);
SIM_DLLEXPORT simChar* simGetStackStringValue(simInt stackHandle,simInt* stringSize);
SIM_DLLEXPORT simInt simGetStackTableInfo(simInt stackHandle,simInt infoType);
SIM_DLLEXPORT simInt simGetStackUInt8Table(simInt stackHandle,simUChar* array,simInt count);
SIM_DLLEXPORT simInt simGetStackInt32Table(simInt stackHandle,simInt* array,simInt count);
SIM_DLLEXPORT simInt simGetStackInt64Table(simInt stackHandle,simInt64* array,simInt count);
SIM_DLLEXPORT simInt simGetStackFloatTable(simInt stackHandle,simFloat* array,simInt count);
SIM_DLLEXPORT simInt simGetStackDoubleTable(simInt stackHandle,simDouble* array,simInt count);
SIM_DLLEXPORT simInt simUnfoldStackTable(simInt stackHandle);
SIM_DLLEXPORT simInt simDebugStack(simInt stackHandle,simInt cIndex);
SIM_DLLEXPORT simInt simGetEngineInt32Param(simInt paramId,simInt objectHandle,const simVoid* object,simBool* ok);
SIM_DLLEXPORT simBool simGetEngineBoolParam(simInt paramId,simInt objectHandle,const simVoid* object,simBool* ok);
SIM_DLLEXPORT simInt simSetEngineInt32Param(simInt paramId,simInt objectHandle,const simVoid* object,simInt val);
SIM_DLLEXPORT simInt simSetEngineBoolParam(simInt paramId,simInt objectHandle,const simVoid* object,simBool val);
SIM_DLLEXPORT simInt simInsertObjectIntoOctree(simInt octreeHandle,simInt objectHandle,simInt options,const simUChar* color,simUInt tag,simVoid* reserved);
SIM_DLLEXPORT simInt simSubtractObjectFromOctree(simInt octreeHandle,simInt objectHandle,simInt options,simVoid* reserved);
SIM_DLLEXPORT simChar* simOpenTextEditor(const simChar* initText,const simChar* xml,simInt* various);
SIM_DLLEXPORT simChar* simPackTable(simInt stackHandle,simInt* bufferSize);
SIM_DLLEXPORT simInt simUnpackTable(simInt stackHandle,const simChar* buffer,simInt bufferSize);
SIM_DLLEXPORT simInt simSetReferencedHandles(simInt objectHandle,simInt count,const simInt* referencedHandles,const simInt* reserved1,const simInt* reserved2);
SIM_DLLEXPORT simInt simGetReferencedHandles(simInt objectHandle,simInt** referencedHandles,simInt** reserved1,simInt** reserved2);
SIM_DLLEXPORT simInt simGetShapeViz(simInt shapeHandle,simInt index,struct SShapeVizInfo* info);
SIM_DLLEXPORT simInt simExecuteScriptString(simInt scriptHandleOrType,const simChar* stringAtScriptName,simInt stackHandle);
SIM_DLLEXPORT simChar* simGetApiFunc(simInt scriptHandleOrType,const simChar* apiWord);
SIM_DLLEXPORT simChar* simGetApiInfo(simInt scriptHandleOrType,const simChar* apiWord);
SIM_DLLEXPORT simInt simSetModuleInfo(const simChar* moduleName,simInt infoType,const simChar* stringInfo,simInt intInfo);
SIM_DLLEXPORT simInt simGetModuleInfo(const simChar* moduleName,simInt infoType,simChar** stringInfo,simInt* intInfo);
SIM_DLLEXPORT simInt simIsDeprecated(const simChar* funcOrConst);
SIM_DLLEXPORT simChar* simGetPersistentDataTags(simInt* tagCount);
SIM_DLLEXPORT simInt simEventNotification(const simChar* event);
SIM_DLLEXPORT simInt simAddLog(const simChar* pluginName,simInt verbosityLevel,const simChar* logMsg);
SIM_DLLEXPORT simInt simIsDynamicallyEnabled(simInt objectHandle);
SIM_DLLEXPORT simInt simInitScript(simInt scriptHandle);
SIM_DLLEXPORT simInt simModuleEntry(simInt handle,const simChar* label,simInt state);
SIM_DLLEXPORT simInt simCheckExecAuthorization(const simChar* what,const simChar* args);
// Following courtesy of Stephen James:
SIM_DLLEXPORT simInt simExtLaunchUIThread(const simChar* applicationName,simInt options,const simChar* sceneOrModelOrUiToLoad,const simChar* applicationDir_);
SIM_DLLEXPORT simInt simExtCanInitSimThread();
SIM_DLLEXPORT simInt simExtSimThreadInit();
SIM_DLLEXPORT simInt simExtSimThreadDestroy();
SIM_DLLEXPORT simInt simExtPostExitRequest();
SIM_DLLEXPORT simInt simExtGetExitRequest();
SIM_DLLEXPORT simInt simExtStep(simBool stepIfRunning);
// non documented functions, mainly for the dynamics plugins:
SIM_DLLEXPORT simVoid _simSetDynamicSimulationIconCode(simVoid* object,simInt code);
SIM_DLLEXPORT simVoid _simSetDynamicObjectFlagForVisualization(simVoid* object,simInt flag);
SIM_DLLEXPORT simInt _simGetObjectListSize(simInt objType);
SIM_DLLEXPORT const simVoid* _simGetObjectFromIndex(simInt objType,simInt index);
SIM_DLLEXPORT simInt _simGetObjectID(const simVoid* object);
SIM_DLLEXPORT simInt _simGetObjectType(const simVoid* object);
SIM_DLLEXPORT const simVoid** _simGetObjectChildren(const simVoid* object,simInt* count);
SIM_DLLEXPORT const simVoid* _simGetGeomProxyFromShape(const simVoid* shape);
SIM_DLLEXPORT const simVoid* _simGetParentObject(const simVoid* object);
SIM_DLLEXPORT const simVoid* _simGetObject(int objID);
SIM_DLLEXPORT simBool _simIsShapeDynamicallyStatic(const simVoid* shape);
SIM_DLLEXPORT simInt _simGetTreeDynamicProperty(const simVoid* object);
SIM_DLLEXPORT simInt _simGetDummyLinkType(const simVoid* dummy,simInt* linkedDummyID);
SIM_DLLEXPORT simInt _simGetJointMode(const simVoid* joint);
SIM_DLLEXPORT simBool _simIsJointInHybridOperation(const simVoid* joint);
SIM_DLLEXPORT simVoid _simDisableDynamicTreeForManipulation(const simVoid* object,simBool disableFlag);
SIM_DLLEXPORT simBool _simIsShapeDynamicallyRespondable(const simVoid* shape);
SIM_DLLEXPORT simInt _simGetDynamicCollisionMask(const simVoid* shape);
SIM_DLLEXPORT const simVoid* _simGetLastParentForLocalGlobalCollidable(const simVoid* shape);
SIM_DLLEXPORT simBool _simGetStartSleeping(const simVoid* shape);
SIM_DLLEXPORT simBool _simGetWasPutToSleepOnce(const simVoid* shape);
SIM_DLLEXPORT simBool _simGetDynamicsFullRefreshFlag(const simVoid* object);
SIM_DLLEXPORT simVoid _simSetDynamicsFullRefreshFlag(const simVoid* object,simBool flag);
SIM_DLLEXPORT simVoid _simClearAdditionalForceAndTorque(const simVoid* shape);
SIM_DLLEXPORT simInt _simGetJointType(const simVoid* joint);
SIM_DLLEXPORT const simVoid* _simGetGeomWrapFromGeomProxy(const simVoid* geomData);
SIM_DLLEXPORT simInt _simGetPurePrimitiveType(const simVoid* geomInfo);
SIM_DLLEXPORT simBool _simIsGeomWrapGeometric(const simVoid* geomInfo);
SIM_DLLEXPORT simBool _simIsGeomWrapConvex(const simVoid* geomInfo);
SIM_DLLEXPORT simInt _simGetGeometricCount(const simVoid* geomInfo);
SIM_DLLEXPORT simVoid _simGetAllGeometrics(const simVoid* geomInfo,simVoid** allGeometrics);
SIM_DLLEXPORT simVoid _simMakeDynamicAnnouncement(int announceType);
SIM_DLLEXPORT simInt _simGetTimeDiffInMs(simInt previousTime);
SIM_DLLEXPORT simBool _simDoEntitiesCollide(simInt entity1ID,simInt entity2ID,simInt* cacheBuffer,simBool overrideCollidableFlagIfShape1,simBool overrideCollidableFlagIfShape2,simBool pathOrMotionPlanningRoutineCalling);
SIM_DLLEXPORT const simVoid* _simGetIkGroupObject(int ikGroupID);
SIM_DLLEXPORT simInt _simMpHandleIkGroupObject(const simVoid* ikGroup);
SIM_DLLEXPORT simInt _simGetJointDynCtrlMode(const simVoid* joint);
SIM_DLLEXPORT simInt simFloatingViewRemove(simInt floatingViewHandle);
// double precision functions (compatibility):
#ifdef switchToDouble
SIM_DLLEXPORT simInt simSetFloatParam_D(simInt parameter,simDouble floatState);
SIM_DLLEXPORT simInt simGetFloatParam_D(simInt parameter,simDouble* floatState);
SIM_DLLEXPORT simInt simGetObjectMatrix_D(simInt objectHandle,simInt relativeToObjectHandle,simDouble* matrix);
SIM_DLLEXPORT simInt simSetObjectMatrix_D(simInt objectHandle,simInt relativeToObjectHandle,const simDouble* matrix);
SIM_DLLEXPORT simInt simGetObjectPose_D(simInt objectHandle,simInt relativeToObjectHandle,simDouble* pose);
SIM_DLLEXPORT simInt simSetObjectPose_D(simInt objectHandle,simInt relativeToObjectHandle,const simDouble* pose);
SIM_DLLEXPORT simInt simGetObjectPosition_D(simInt objectHandle,simInt relativeToObjectHandle,simDouble* position);
SIM_DLLEXPORT simInt simSetObjectPosition_D(simInt objectHandle,simInt relativeToObjectHandle,const simDouble* position);
SIM_DLLEXPORT simInt simGetObjectOrientation_D(simInt objectHandle,simInt relativeToObjectHandle,simDouble* eulerAngles);
SIM_DLLEXPORT simInt simGetObjectQuaternion_D(simInt objectHandle,simInt relativeToObjectHandle,simDouble* quaternion);
SIM_DLLEXPORT simInt simSetObjectQuaternion_D(simInt objectHandle,simInt relativeToObjectHandle,const simDouble* quaternion);
SIM_DLLEXPORT simInt simSetObjectOrientation_D(simInt objectHandle,simInt relativeToObjectHandle,const simDouble* eulerAngles);
SIM_DLLEXPORT simInt simGetJointPosition_D(simInt objectHandle,simDouble* position);
SIM_DLLEXPORT simInt simSetJointPosition_D(simInt objectHandle,simDouble position);
SIM_DLLEXPORT simInt simSetJointTargetPosition_D(simInt objectHandle,simDouble targetPosition);
SIM_DLLEXPORT simInt simGetJointTargetPosition_D(simInt objectHandle,simDouble* targetPosition);
SIM_DLLEXPORT simInt simGetObjectChildPose_D(simInt objectHandle,simDouble* pose);
SIM_DLLEXPORT simInt simSetObjectChildPose_D(simInt objectHandle,const simDouble* pose);
SIM_DLLEXPORT simInt simGetJointInterval_D(simInt objectHandle,simBool* cyclic,simDouble* interval);
SIM_DLLEXPORT simInt simSetJointInterval_D(simInt objectHandle,simBool cyclic,const simDouble* interval);
SIM_DLLEXPORT simInt simBuildIdentityMatrix_D(simDouble* matrix);
SIM_DLLEXPORT simInt simBuildMatrix_D(const simDouble* position,const simDouble* eulerAngles,simDouble* matrix);
SIM_DLLEXPORT simInt simBuildPose_D(const simDouble* position,const simDouble* eulerAngles,simDouble* pose);
SIM_DLLEXPORT simInt simGetEulerAnglesFromMatrix_D(const simDouble* matrix,simDouble* eulerAngles);
SIM_DLLEXPORT simInt simInvertMatrix_D(simDouble* matrix);
SIM_DLLEXPORT simInt simMultiplyMatrices_D(const simDouble* matrixIn1,const simDouble* matrixIn2,simDouble* matrixOut);
SIM_DLLEXPORT simInt simMultiplyPoses_D(const simDouble* poseIn1,const simDouble* poseIn2,simDouble* poseOut);
SIM_DLLEXPORT simInt simInvertPose_D(simDouble* pose);
SIM_DLLEXPORT simInt simInterpolatePoses_D(const simDouble* poseIn1,const simDouble* poseIn2,simDouble interpolFactor,simDouble* poseOut);
SIM_DLLEXPORT simInt simPoseToMatrix_D(const simDouble* poseIn,simDouble* matrixOut);
SIM_DLLEXPORT simInt simMatrixToPose_D(const simDouble* matrixIn,simDouble* poseOut);
SIM_DLLEXPORT simInt simInterpolateMatrices_D(const simDouble* matrixIn1,const simDouble* matrixIn2,simDouble interpolFactor,simDouble* matrixOut);
SIM_DLLEXPORT simInt simTransformVector_D(const simDouble* matrix,simDouble* vect);
SIM_DLLEXPORT simDouble simGetSimulationTime_D();
SIM_DLLEXPORT simDouble simGetSystemTime_D();
SIM_DLLEXPORT simInt simHandleProximitySensor_D(simInt sensorHandle,simDouble* detectedPoint,simInt* detectedObjectHandle,simDouble* normalVector);
SIM_DLLEXPORT simInt simReadProximitySensor_D(simInt sensorHandle,simDouble* detectedPoint,simInt* detectedObjectHandle,simDouble* normalVector);
SIM_DLLEXPORT simInt simHandleDynamics_D(simDouble deltaTime);
SIM_DLLEXPORT simInt simCheckProximitySensor_D(simInt sensorHandle,simInt entityHandle,simDouble* detectedPoint);
SIM_DLLEXPORT simInt simCheckProximitySensorEx_D(simInt sensorHandle,simInt entityHandle,simInt detectionMode,simDouble detectionThreshold,simDouble maxAngle,simDouble* detectedPoint,simInt* detectedObjectHandle,simDouble* normalVector);
SIM_DLLEXPORT simInt simCheckProximitySensorEx2_D(simInt sensorHandle,simDouble* vertexPointer,simInt itemType,simInt itemCount,simInt detectionMode,simDouble detectionThreshold,simDouble maxAngle,simDouble* detectedPoint,simDouble* normalVector);
SIM_DLLEXPORT simInt simCheckCollisionEx_D(simInt entity1Handle,simInt entity2Handle,simDouble** intersectionSegments);
SIM_DLLEXPORT simInt simCheckDistance_D(simInt entity1Handle,simInt entity2Handle,simDouble threshold,simDouble* distanceData);
SIM_DLLEXPORT simInt simSetSimulationTimeStep_D(simDouble timeStep);
SIM_DLLEXPORT simDouble simGetSimulationTimeStep_D();
SIM_DLLEXPORT simInt simAdjustRealTimeTimer_D(simInt instanceIndex,simDouble deltaTime);
SIM_DLLEXPORT simInt simFloatingViewAdd_D(simDouble posX,simDouble posY,simDouble sizeX,simDouble sizeY,simInt options);
SIM_DLLEXPORT simInt simHandleGraph_D(simInt graphHandle,simDouble simulationTime);
SIM_DLLEXPORT simInt simSetGraphStreamTransformation_D(simInt graphHandle,simInt streamId,simInt trType,simDouble mult,simDouble off,simInt movingAvgPeriod);
SIM_DLLEXPORT simInt simAddGraphStream_D(simInt graphHandle,const simChar* streamName,const simChar* unitStr,simInt options,const simDouble* color,simDouble cyclicRange);
SIM_DLLEXPORT simInt simAddGraphCurve_D(simInt graphHandle,const simChar* curveName,simInt dim,const simInt* streamIds,const simDouble* defaultValues,const simChar* unitStr,simInt options,const simDouble* color,simInt curveWidth);
SIM_DLLEXPORT simInt simSetGraphStreamValue_D(simInt graphHandle,simInt streamId,simDouble value);
SIM_DLLEXPORT simInt simSetJointTargetVelocity_D(simInt objectHandle,simDouble targetVelocity);
SIM_DLLEXPORT simInt simGetJointTargetVelocity_D(simInt objectHandle,simDouble* targetVelocity);
SIM_DLLEXPORT simInt simScaleObjects_D(const simInt* objectHandles,simInt objectCount,simDouble scalingFactor,simBool scalePositionsToo);
SIM_DLLEXPORT simInt simAddDrawingObject_D(simInt objectType,simDouble size,simDouble duplicateTolerance,simInt parentObjectHandle,simInt maxItemCount,const simDouble* color,const simDouble* setToNULL,const simDouble* setToNULL2,const simDouble* setToNULL3);
SIM_DLLEXPORT simInt simAddDrawingObjectItem_D(simInt objectHandle,const simDouble* itemData);
SIM_DLLEXPORT simDouble simGetObjectSizeFactor_D(simInt objectHandle);
SIM_DLLEXPORT simInt simSetFloatSignal_D(const simChar* signalName,simDouble signalValue);
SIM_DLLEXPORT simInt simGetFloatSignal_D(const simChar* signalName,simDouble* signalValue);
SIM_DLLEXPORT simInt simReadForceSensor_D(simInt objectHandle,simDouble* forceVector,simDouble* torqueVector);
SIM_DLLEXPORT simInt simSetLightParameters_D(simInt objectHandle,simInt state,const simDouble* setToNULL,const simDouble* diffusePart,const simDouble* specularPart);
SIM_DLLEXPORT simInt simGetLightParameters_D(simInt objectHandle,simDouble* setToNULL,simDouble* diffusePart,simDouble* specularPart);
SIM_DLLEXPORT simInt simGetVelocity_D(simInt shapeHandle,simDouble* linearVelocity,simDouble* angularVelocity);
SIM_DLLEXPORT simInt simGetObjectVelocity_D(simInt objectHandle,simDouble* linearVelocity,simDouble* angularVelocity);
SIM_DLLEXPORT simInt simGetJointVelocity_D(simInt jointHandle,simDouble* velocity);
SIM_DLLEXPORT simInt simAddForceAndTorque_D(simInt shapeHandle,const simDouble* force,const simDouble* torque);
SIM_DLLEXPORT simInt simAddForce_D(simInt shapeHandle,const simDouble* position,const simDouble* force);
SIM_DLLEXPORT simInt simSetObjectColor_D(simInt objectHandle,simInt index,simInt colorComponent,const simDouble* rgbData);
SIM_DLLEXPORT simInt simGetObjectColor_D(simInt objectHandle,simInt index,simInt colorComponent,simDouble* rgbData);
SIM_DLLEXPORT simInt simSetShapeColor_D(simInt shapeHandle,const simChar* colorName,simInt colorComponent,const simDouble* rgbData);
SIM_DLLEXPORT simInt simGetShapeColor_D(simInt shapeHandle,const simChar* colorName,simInt colorComponent,simDouble* rgbData);
SIM_DLLEXPORT simInt simGetContactInfo_D(simInt dynamicPass,simInt objectHandle,simInt index,simInt* objectHandles,simDouble* contactInfo);
SIM_DLLEXPORT simInt simImportShape_D(simInt fileformat,const simChar* pathAndFilename,simInt options,simDouble identicalVerticeTolerance,simDouble scalingFactor);
SIM_DLLEXPORT simInt simImportMesh_D(simInt fileformat,const simChar* pathAndFilename,simInt options,simDouble identicalVerticeTolerance,simDouble scalingFactor,simDouble*** vertices,simInt** verticesSizes,simInt*** indices,simInt** indicesSizes,simDouble*** reserved,simChar*** names);
SIM_DLLEXPORT simInt simExportMesh_D(simInt fileformat,const simChar* pathAndFilename,simInt options,simDouble scalingFactor,simInt elementCount,const simDouble** vertices,const simInt* verticesSizes,const simInt** indices,const simInt* indicesSizes,simDouble** reserved,const simChar** names);
SIM_DLLEXPORT simInt simCreateMeshShape_D(simInt options,simDouble shadingAngle,const simDouble* vertices,simInt verticesSize,const simInt* indices,simInt indicesSize,simDouble* reserved);
SIM_DLLEXPORT simInt simCreatePrimitiveShape_D(simInt primitiveType,const simDouble* sizes,simInt options);
SIM_DLLEXPORT simInt simCreateHeightfieldShape_D(simInt options,simDouble shadingAngle,simInt xPointCount,simInt yPointCount,simDouble xSize,const simDouble* heights);
SIM_DLLEXPORT simInt simGetShapeMesh_D(simInt shapeHandle,simDouble** vertices,simInt* verticesSize,simInt** indices,simInt* indicesSize,simDouble** normals);
SIM_DLLEXPORT simInt simCreateJoint_D(simInt jointType,simInt jointMode,simInt options,const simDouble* sizes,const simDouble* reservedA,const simDouble* reservedB);
SIM_DLLEXPORT simInt simGetObjectFloatParam_D(simInt objectHandle,simInt ParamID,simDouble* Param);
SIM_DLLEXPORT simInt simSetObjectFloatParam_D(simInt objectHandle,simInt ParamID,simDouble Param);
SIM_DLLEXPORT simDouble* simGetObjectFloatArrayParam_D(simInt objectHandle,simInt parameterID,simInt* size);
SIM_DLLEXPORT simInt simSetObjectFloatArrayParam_D(simInt objectHandle,simInt parameterID,const simDouble* params,simInt size);
SIM_DLLEXPORT simInt simAuxiliaryConsoleOpen_D(const simChar* title,simInt maxLines,simInt mode,const simInt* position,const simInt* size,const simDouble* textColor,const simDouble* backgroundColor);
SIM_DLLEXPORT simInt simGetRotationAxis_D(const simDouble* matrixStart,const simDouble* matrixGoal,simDouble* axis,simDouble* angle);
SIM_DLLEXPORT simInt simRotateAroundAxis_D(const simDouble* matrixIn,const simDouble* axis,const simDouble* axisPos,simDouble angle,simDouble* matrixOut);
SIM_DLLEXPORT simInt simGetJointForce_D(simInt jointHandle,simDouble* forceOrTorque);
SIM_DLLEXPORT simInt simGetJointTargetForce_D(simInt jointHandle,simDouble* forceOrTorque);
SIM_DLLEXPORT simInt simSetJointTargetForce_D(simInt objectHandle,simDouble forceOrTorque,simBool signedValue);
SIM_DLLEXPORT simInt simCameraFitToView_D(simInt viewHandleOrIndex,simInt objectCount,const simInt* objectHandles,simInt options,simDouble scaling);
SIM_DLLEXPORT simInt simHandleVisionSensor_D(simInt visionSensorHandle,simDouble** auxValues,simInt** auxValuesCount);
SIM_DLLEXPORT simInt simReadVisionSensor_D(simInt visionSensorHandle,simDouble** auxValues,simInt** auxValuesCount);
SIM_DLLEXPORT simInt simCheckVisionSensor_D(simInt visionSensorHandle,simInt entityHandle,simDouble** auxValues,simInt** auxValuesCount);
SIM_DLLEXPORT simDouble* simCheckVisionSensorEx_D(simInt visionSensorHandle,simInt entityHandle,simBool returnImage);
SIM_DLLEXPORT simUChar* simGetVisionSensorImg_D(simInt sensorHandle,simInt options,simDouble rgbaCutOff,const simInt* pos,const simInt* size,simInt* resolution);
SIM_DLLEXPORT simDouble* simGetVisionSensorDepth_D(simInt sensorHandle,simInt options,const simInt* pos,const simInt* size,simInt* resolution);
SIM_DLLEXPORT simInt simCreateDummy_D(simDouble size,const simDouble* reserved);
SIM_DLLEXPORT simInt simCreateProximitySensor_D(simInt sensorType,simInt subType,simInt options,const simInt* intParams,const simDouble* floatParams,const simDouble* reserved);
SIM_DLLEXPORT simInt simCreateForceSensor_D(simInt options,const simInt* intParams,const simDouble* floatParams,const simDouble* reserved);
SIM_DLLEXPORT simInt simCreateVisionSensor_D(simInt options,const simInt* intParams,const simDouble* floatParams,const simDouble* reserved);
SIM_DLLEXPORT simInt simConvexDecompose_D(simInt shapeHandle,simInt options,const simInt* intParams,const simDouble* floatParams);
SIM_DLLEXPORT simInt simWriteTexture_D(simInt textureId,simInt options,const simChar* data,simInt posX,simInt posY,simInt sizeX,simInt sizeY,simDouble interpol);
SIM_DLLEXPORT simInt simCreateTexture_D(const simChar* fileName,simInt options,const simDouble* planeSizes,const simDouble* scalingUV,const simDouble* xy_g,simInt fixedResolution,simInt* textureId,simInt* resolution,const simVoid* reserved);
SIM_DLLEXPORT simInt simGetShapeGeomInfo_D(simInt shapeHandle,simInt* intData,simDouble* floatData,simVoid* reserved);
SIM_DLLEXPORT simInt simScaleObject_D(simInt objectHandle,simDouble xScale,simDouble yScale,simDouble zScale,simInt options);
SIM_DLLEXPORT simInt simSetShapeTexture_D(simInt shapeHandle,simInt textureId,simInt mappingMode,simInt options,const simDouble* uvScaling,const simDouble* position,const simDouble* orientation);
SIM_DLLEXPORT simInt simTransformImage_D(simUChar* image,const simInt* resolution,simInt options,const simDouble* floatParams,const simInt* intParams,simVoid* reserved);
SIM_DLLEXPORT simInt simGetQHull_D(const simDouble* inVertices,simInt inVerticesL,simDouble** verticesOut,simInt* verticesOutL,simInt** indicesOut,simInt* indicesOutL,simInt reserved1,const simDouble* reserved2);
SIM_DLLEXPORT simInt simGetDecimatedMesh_D(const simDouble* inVertices,simInt inVerticesL,const simInt* inIndices,simInt inIndicesL,simDouble** verticesOut,simInt* verticesOutL,simInt** indicesOut,simInt* indicesOutL,simDouble decimationPercent,simInt reserved1,const simDouble* reserved2);
SIM_DLLEXPORT simInt simComputeMassAndInertia_D(simInt shapeHandle,simDouble density);
SIM_DLLEXPORT simDouble simGetEngineFloatParam_D(simInt paramId,simInt objectHandle,const simVoid* object,simBool* ok);
SIM_DLLEXPORT simInt simSetEngineFloatParam_D(simInt paramId,simInt objectHandle,const simVoid* object,simDouble val);
SIM_DLLEXPORT simInt simCreateOctree_D(simDouble voxelSize,simInt options,simDouble pointSize,simVoid* reserved);
SIM_DLLEXPORT simInt simCreatePointCloud_D(simDouble maxVoxelSize,simInt maxPtCntPerVoxel,simInt options,simDouble pointSize,simVoid* reserved);
SIM_DLLEXPORT simInt simSetPointCloudOptions_D(simInt pointCloudHandle,simDouble maxVoxelSize,simInt maxPtCntPerVoxel,simInt options,simDouble pointSize,simVoid* reserved);
SIM_DLLEXPORT simInt simGetPointCloudOptions_D(simInt pointCloudHandle,simDouble* maxVoxelSize,simInt* maxPtCntPerVoxel,simInt* options,simDouble* pointSize,simVoid* reserved);
SIM_DLLEXPORT simInt simInsertVoxelsIntoOctree_D(simInt octreeHandle,simInt options,const simDouble* pts,simInt ptCnt,const simUChar* color,const simUInt* tag,simVoid* reserved);
SIM_DLLEXPORT simInt simRemoveVoxelsFromOctree_D(simInt octreeHandle,simInt options,const simDouble* pts,simInt ptCnt,simVoid* reserved);
SIM_DLLEXPORT simInt simInsertPointsIntoPointCloud_D(simInt pointCloudHandle,simInt options,const simDouble* pts,simInt ptCnt,const simUChar* color,simVoid* optionalValues);
SIM_DLLEXPORT simInt simRemovePointsFromPointCloud_D(simInt pointCloudHandle,simInt options,const simDouble* pts,simInt ptCnt,simDouble tolerance,simVoid* reserved);
SIM_DLLEXPORT simInt simIntersectPointsWithPointCloud_D(simInt pointCloudHandle,simInt options,const simDouble* pts,simInt ptCnt,simDouble tolerance,simVoid* reserved);
SIM_DLLEXPORT const simDouble* simGetOctreeVoxels_D(simInt octreeHandle,simInt* ptCnt,simVoid* reserved);
SIM_DLLEXPORT const simDouble* simGetPointCloudPoints_D(simInt pointCloudHandle,simInt* ptCnt,simVoid* reserved);
SIM_DLLEXPORT simInt simInsertObjectIntoPointCloud_D(simInt pointCloudHandle,simInt objectHandle,simInt options,simDouble gridSize,const simUChar* color,simVoid* optionalValues);
SIM_DLLEXPORT simInt simSubtractObjectFromPointCloud_D(simInt pointCloudHandle,simInt objectHandle,simInt options,simDouble tolerance,simVoid* reserved);
SIM_DLLEXPORT simInt simCheckOctreePointOccupancy_D(simInt octreeHandle,simInt options,const simDouble* points,simInt ptCnt,simUInt* tag,simUInt64* location,simVoid* reserved);
SIM_DLLEXPORT simInt simApplyTexture_D(simInt shapeHandle,const simDouble* textureCoordinates,simInt textCoordSize,const simUChar* texture,const simInt* textureResolution,simInt options);
SIM_DLLEXPORT simInt simSetJointDependency_D(simInt jointHandle,simInt masterJointHandle,simDouble offset,simDouble multCoeff);
SIM_DLLEXPORT simInt simGetJointDependency_D(simInt jointHandle,simInt* masterJointHandle,simDouble* offset,simDouble* multCoeff);
SIM_DLLEXPORT simInt simGetShapeMass_D(simInt shapeHandle,simDouble* mass);
SIM_DLLEXPORT simInt simSetShapeMass_D(simInt shapeHandle,simDouble mass);
SIM_DLLEXPORT simInt simGetShapeInertia_D(simInt shapeHandle,simDouble* inertiaMatrix,simDouble* transformationMatrix);
SIM_DLLEXPORT simInt simSetShapeInertia_D(simInt shapeHandle,const simDouble* inertiaMatrix,const simDouble* transformationMatrix);
SIM_DLLEXPORT simInt simGenerateShapeFromPath_D(const simDouble* path,simInt pathSize,const simDouble* section,simInt sectionSize,simInt options,const simDouble* upVector,simDouble reserved);
SIM_DLLEXPORT simDouble simGetClosestPosOnPath_D(const simDouble* path,simInt pathSize,const simDouble* pathLengths,const simDouble* absPt);
SIM_DLLEXPORT simInt simExtCallScriptFunction_D(simInt scriptHandleOrType, const simChar* functionNameAtScriptName,
                                               const simInt* inIntData, simInt inIntCnt,
                                               const simDouble* inFloatData, simInt inFloatCnt,
                                               const simChar** inStringData, simInt inStringCnt,
                                               const simChar* inBufferData, simInt inBufferCnt,
                                               simInt** outIntData, simInt* outIntCnt,
                                               simDouble** outFloatData, simInt* outFloatCnt,
                                               simChar*** outStringData, simInt* outStringCnt,
                                               simChar** outBufferData, simInt* outBufferSize);
SIM_DLLEXPORT simVoid _simGetObjectLocalTransformation_D(const simVoid* object,simDouble* pos,simDouble* quat,simBool excludeFirstJointTransformation);
SIM_DLLEXPORT simVoid _simSetObjectLocalTransformation_D(simVoid* object,const simDouble* pos,const simDouble* quat,simDouble simTime);
SIM_DLLEXPORT simVoid _simDynReportObjectCumulativeTransformation_D(simVoid* object,const simDouble* pos,const simDouble* quat,simDouble simTime);
SIM_DLLEXPORT simVoid _simSetObjectCumulativeTransformation_D(simVoid* object,const simDouble* pos,const simDouble* quat,simBool keepChildrenInPlace);
SIM_DLLEXPORT simVoid _simGetObjectCumulativeTransformation_D(const simVoid* object,simDouble* pos,simDouble* quat,simBool excludeFirstJointTransformation);
SIM_DLLEXPORT simVoid _simSetJointVelocity_D(const simVoid* joint,simDouble vel);
SIM_DLLEXPORT simVoid _simSetJointPosition_D(const simVoid* joint,simDouble pos);
SIM_DLLEXPORT simDouble _simGetJointPosition_D(const simVoid* joint);
SIM_DLLEXPORT simVoid _simSetDynamicMotorPositionControlTargetPosition_D(const simVoid* joint,simDouble pos);
SIM_DLLEXPORT simVoid _simGetInitialDynamicVelocity_D(const simVoid* shape,simDouble* vel);
SIM_DLLEXPORT simVoid _simSetInitialDynamicVelocity_D(simVoid* shape,const simDouble* vel);
SIM_DLLEXPORT simVoid _simGetInitialDynamicAngVelocity_D(const simVoid* shape,simDouble* angularVel);
SIM_DLLEXPORT simVoid _simSetInitialDynamicAngVelocity_D(simVoid* shape,const simDouble* angularVel);
SIM_DLLEXPORT simVoid _simSetShapeDynamicVelocity_D(simVoid* shape,const simDouble* linear,const simDouble* angular,simDouble simTime);
SIM_DLLEXPORT simVoid _simGetAdditionalForceAndTorque_D(const simVoid* shape,simDouble* force,simDouble* torque);
SIM_DLLEXPORT simBool _simGetJointPositionInterval_D(const simVoid* joint,simDouble* minValue,simDouble* rangeValue);
SIM_DLLEXPORT simDouble _simGetDynamicMotorTargetPosition_D(const simVoid* joint);
SIM_DLLEXPORT simDouble _simGetDynamicMotorTargetVelocity_D(const simVoid* joint);
SIM_DLLEXPORT simDouble _simGetDynamicMotorMaxForce_D(const simVoid* joint);
SIM_DLLEXPORT simDouble _simGetDynamicMotorUpperLimitVelocity_D(const simVoid* joint);
SIM_DLLEXPORT simVoid _simSetDynamicMotorReflectedPositionFromDynamicEngine_D(simVoid* joint,simDouble pos,simDouble simTime);
SIM_DLLEXPORT simVoid _simSetJointSphericalTransformation_D(simVoid* joint,const simDouble* quat,simDouble simTime);
SIM_DLLEXPORT simVoid _simAddForceSensorCumulativeForcesAndTorques_D(simVoid* forceSensor,const simDouble* force,const simDouble* torque,int totalPassesCount,simDouble simTime);
SIM_DLLEXPORT simVoid _simAddJointCumulativeForcesOrTorques_D(simVoid* joint,simDouble forceOrTorque,int totalPassesCount,simDouble simTime);
SIM_DLLEXPORT simDouble _simGetMass_D(const simVoid* geomInfo);
SIM_DLLEXPORT simDouble _simGetLocalInertiaInfo_D(const simVoid* object,simDouble* pos,simDouble* quat,simDouble* diagI);
SIM_DLLEXPORT simVoid _simGetPurePrimitiveSizes_D(const simVoid* geometric,simDouble* sizes);
SIM_DLLEXPORT simVoid _simGetVerticesLocalFrame_D(const simVoid* geometric,simDouble* pos,simDouble* quat);
SIM_DLLEXPORT const simDouble* _simGetHeightfieldData_D(const simVoid* geometric,simInt* xCount,simInt* yCount,simDouble* minHeight,simDouble* maxHeight);
SIM_DLLEXPORT simVoid _simGetCumulativeMeshes_D(const simVoid* geomInfo,simDouble** vertices,simInt* verticesSize,simInt** indices,simInt* indicesSize);
SIM_DLLEXPORT simVoid _simGetGravity_D(simDouble* gravity);
SIM_DLLEXPORT simBool _simGetDistanceBetweenEntitiesIfSmaller_D(simInt entity1ID,simInt entity2ID,simDouble* distance,simDouble* ray,simInt* cacheBuffer,simBool overrideMeasurableFlagIfNonCollection1,simBool overrideMeasurableFlagIfNonCollection2,simBool pathPlanningRoutineCalling);
SIM_DLLEXPORT simInt _simHandleJointControl_D(const simVoid* joint,simInt auxV,const simInt* inputValuesInt,const simDouble* inputValuesFloat,simDouble* outputValues);
SIM_DLLEXPORT simInt _simHandleCustomContact_D(simInt objHandle1,simInt objHandle2,simInt engine,simInt* dataInt,simDouble* dataFloat);
SIM_DLLEXPORT simDouble _simGetPureHollowScaling_D(const simVoid* geometric);
SIM_DLLEXPORT simVoid _simDynCallback_D(const simInt* intData,const simDouble* floatData);
#endif

#include "sim-old.h"

#endif // !defined(sim_INCLUDED_)
